#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 175
#define YY_END_OF_BUFFER 176
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1188] =
    {   0,
        0,    0,  172,  172,    2,    2,  176,  174,    5,    5,
      174,  174,  164,  170,  164,  164,  167,  164,  164,  164,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  164,  172,  173,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    5,  159,    0,    1,  167,
      166,  165,  161,  160,  158,  162,  169,  169,  169,  169,

      169,  169,  169,  112,  169,  113,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  154,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  114,  169,  115,  116,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  139,  169,
      117,  118,  119,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  120,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  163,  172,  171,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  168,  165,  169,   98,  169,   99,  169,  169,
      100,  169,  101,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  102,  169,  169,  124,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  103,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  104,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  105,  169,  169,  169,  106,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  107,  169,
      108,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  134,  169,  169,  169,  109,  169,  169,
      169,  110,  169,  169,  169,  169,  169,  111,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      169,  169,  169,  169,  169,  169,  169,  169,   72,  169,
       73,  148,   74,  169,  169,  169,  169,  169,  169,  169,
      169,  169,   75,  169,  169,  169,  169,   76,  169,  169,
      169,   77,  133,   78,  169,  169,  169,  169,  169,  169,
       79,  169,  169,  169,  169,   80,   81,  169,  169,  169,
       82,  169,  123,  169,  169,  169,  169,  169,   83,  169,
       84,    9,  152,   85,   86,  169,   87,  169,   88,  169,
      169,  169,  169,  169,   89,  169,  169,  169,  169,  169,

      169,   90,  169,  169,  169,  169,  169,  169,  169,  143,
      169,  169,  169,   91,  169,  169,   92,   93,  144,   94,
      169,  169,  156,  169,  169,  169,  169,  169,  169,  169,
      169,   95,   96,  169,   97,  126,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  169,   52,   53,  169,   54,  169,  131,  169,
      169,  130,  169,  169,  169,  169,  169,   55,  169,  169,
      169,  169,  169,   56,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  157,  153,   57,  169,  169,  169,  169,
       58,  169,  169,   59,   60,  169,  169,  169,  169,   61,

       62,   63,   64,  169,  125,  169,  169,  151,  169,   65,
      169,   66,  169,  169,  169,  169,  142,  169,  169,  169,
       67,  169,  169,  169,  169,   68,  169,  169,  169,  169,
       69,  169,  169,  169,   70,  169,  169,   71,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    8,  129,   27,  169,  169,  169,
       28,  149,  169,   29,  169,  169,  169,  169,   30,  169,
       31,  169,   32,   33,   34,  169,   35,  169,  169,  169,
      169,   37,  138,   38,   39,  169,   40,  169,  169,   41,
      122,  169,  169,   42,  140,  169,  169,  169,  169,  169,
       43,  169,   44,  121,   45,   46,   47,  169,  169,  169,
      169,   48,   49,   50,   51,  169,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   17,   18,
      155,   19,   20,  135,  169,  169,   21,  169,  169,  136,
       36,  169,    6,  169,  127,   22,  169,   23,  150,  169,
      169,  169,   24,  169,  169,   25,  169,  169,  132,  169,
       26,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  147,  169,   14,   15,  169,  169,
      169,  169,  169,  169,  169,   16,  169,  169,  169,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  169,  137,  128,   12,  169,  146,
      141,  169,   13,  169,  145,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   10,   11,    7,  169,
        2,    2,    2,    2,  169,    2,  169,    2,  169,    2,
      169,    2,  169,    2,    4,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   39,    6,   66,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1195] =
    {   0,
        0,    0,  434,  403,   66,    0,  404, 4759,  131,  133,
      391,    0, 4759, 4759,  129,  390,  131,  130,  370,  362,
      128,  120,  174,  222,  267,  318,  131,  136,  171,  120,
      128,  182,  220,  200,  361,  231,    0,  229,  269,  409,
      259,  170,  145,  133,  287,    0,  315,    0,  166,  210,
      304,  306,    0,    0,  153,  297,  211,  246,  291,  289,
      467,  533,  586,  638,  690,  742,  310,  282,  790,  326,
      228,  842,  371,  894,  942,  994,  264, 1046, 1096, 1148,
     1196,  463,  312,  318,  198,  303, 4759,  255, 4759,  329,
      244,  229, 4759, 4759, 4759, 4759,    0,  121,  182,  216,

      365,  235,  237,  282,  469,    0,  380,  388,  470,  390,
      307,  314,  405,  468,  355,  317,  356,  418,  431,  474,
      487,  527,  480,  522,  503,  523,  508,  525,  525,  527,
      528,  527,  523,    0,  532,  578,  537,  543,  538,  529,
      537,  566,  577,  592,  571,  582,  586,  582,  583,  596,
      604,    0,  609,  633,  622,  626,  644,  641,  634,  643,
      644,  629,  646,  691,  640,  640,  657,  648,  637,  660,
      688,  689,  687,  737,  693,  689,  695,  694,  701,  690,
      716, 4759,    0, 4759,    0,  363,    0,  213,    0,  387,
      206,  199,    0,    0,    0,    0,  740,  766,  775,  792,

     1244,  821,  796,  829, 1292,  750,  844,  861, 1340,  840,
      855,  880,  886, 1392,  898,  903,  934,  966,  983,  948,
      979, 1442,  929,  998,  992, 1020, 1043,  953, 1035, 1048,
     1064, 1088, 1087, 1092, 1127, 1491, 1137, 1136, 1150, 1122,
     1162, 1191, 1193, 1543, 1202, 1221, 1227, 1255, 1261, 1253,
     1295, 1225, 1284, 1298, 1309, 1317, 1350, 1358, 1332, 1591,
     1380, 1363, 1391, 1641, 1306, 1403, 1404, 1425, 1417, 1402,
     1448, 1454, 1466, 1692, 1499, 1476, 1508, 1414, 1502, 1530,
     1524,    0, 4759,  197,  741,    0,  751,    0,  753,  760,
        0,  761,    0,  778,  799,  787,  799, 1371,  857,  897,

     1174,  897,  925,  992,  982,    0,  996, 1558,    0, 1015,
     1055, 1559, 1054, 1059, 1082, 1101, 1093, 1125, 1153,    0,
     1163, 1553, 1190, 1193, 1198, 1250, 1244, 1331, 1331, 1458,
     1469, 1503, 1534, 1543, 1540, 1559, 1565, 1562, 1566, 1582,
     1588, 1593, 1594, 1579, 1588, 1589,    0, 1584, 1591, 1607,
     1604, 1611, 1617, 1614, 1615, 1607, 1613, 1614, 1633, 1635,
     1631, 1646, 1647, 1649, 1655, 1643, 1655, 1646, 1656, 1659,
     1664, 1649, 1664, 1657, 1677, 1672, 1684,    0, 1672, 1678,
     1688,    0, 1685, 1692, 1688, 1703, 1705,    0, 1704, 1707,
     1698, 1703, 1700, 1718, 1709, 1705, 1726, 1707, 1734, 1728,

     1723,    0,  191, 1746, 1744, 1749, 1755, 1759, 1760, 1761,
     1772, 1778, 1784, 1797, 1800, 1803, 1814, 1813, 1838, 1835,
     1846, 1852, 1868, 1857, 1870, 1876, 1887, 1886, 1901, 1909,
     1911, 1920, 1892, 1922, 1930, 1941, 1943, 1924, 1955, 1966,
     1965, 1960, 1978, 1983, 1984, 1994, 2000, 2009, 1995, 2026,
     2032, 2017, 2048, 2038, 2057, 2051, 2049, 2070, 2074, 2083,
     2086, 2092, 2100, 2105, 2115, 2091, 2134, 2140, 2126, 2144,
     2157, 2169, 2166, 2170, 2158, 2188, 2194, 2206, 2200, 2198,
     2202, 2211, 2223, 2244, 2242, 2248, 2252, 2254, 2257, 2265,
     2282, 2290, 2280, 2276, 2298, 2306, 2311, 2314, 2328, 2340,

     2319, 2336, 2362, 2365, 2322, 2330, 2364, 2388, 2373, 2376,
     2404, 2418, 2399, 2427, 2405, 2439, 2440, 2462, 2450, 2429,
     1728, 1749, 1803, 1802, 1812, 1835, 1997, 2040,    0, 2113,
        0,    0,    0, 2117, 2232, 2346, 2376, 2417, 2419, 2454,
     2472, 2476,    0, 2471, 2463, 2466, 2487, 2471, 2490, 2486,
     2484,    0,    0,    0, 2481, 2482, 2478, 2481, 2505, 2503,
        0, 2489, 2492, 2502, 2509,    0,    0, 2501, 2520, 2511,
        0, 2515,    0, 2512, 2507, 2514, 2516, 2531,    0, 2525,
        0,    0,    0,    0,    0, 2520,    0, 2529,    0, 2537,
     2531, 2535, 2529, 2543, 2534, 2550, 2542, 2544, 2545, 2553,

     2562,    0, 2567, 2572, 2570, 2563, 2570, 2566, 2565,    0,
     2573, 2574, 2588,    0, 2587, 2589,    0,    0,    0, 2576,
     2582, 2590,    0, 2580, 2589, 2583, 2604, 2586, 2600, 2604,
     2606,    0,    0, 2611,    0,    0, 2612, 2620, 2621, 2615,
     2624, 2630, 2645, 2646, 2655, 2656, 2658, 2664, 2669, 2674,
     2690, 2698, 2695, 2714, 2704, 2709, 2708, 2743, 2712, 2753,
     2748, 2757, 2762, 2766, 2749, 2788, 2794, 2778, 2783, 2797,
     2807, 2811, 2816, 2833, 2846, 2820, 2837, 2850, 2856, 2852,
     2874, 2861, 2882, 2887, 2890, 2895, 2891, 2916, 2904, 2919,
     2928, 2940, 2941, 2956, 2930, 2964, 2945, 2962, 2970, 2973,

     2979, 2995, 2994, 3005, 3004, 3007, 3029, 3030, 3035, 3059,
     3047, 3018, 3053, 3072, 3078, 3081, 3083, 3084, 3095, 3113,
     3097, 3107, 3121, 3126, 3123, 3132, 3137, 3149, 3163, 3135,
     3151, 3167, 3175, 3177, 3180, 3189, 3192, 3191, 3186, 3205,
     3217, 3215, 3245, 3234, 3255, 3223, 3260, 3246, 3247, 3251,
     3259, 3269, 2729,    0,    0, 2730,    0, 2802,    0, 2812,
     2886,    0, 2881, 2977, 2986, 3009, 3069,    0, 3172, 3233,
     3267, 3276, 3285,    0, 3284, 3276, 3286, 3297, 3299, 3285,
     3302, 3289, 3307,    0,    0,    0, 3290, 3307, 3315, 3306,
     3300, 3315, 3304, 3320,    0, 3306, 3323, 3311, 3322,    0,

        0,    0,    0, 3331,    0, 3337, 3325,    0, 3322,    0,
     3325,    0, 3342, 3328, 3346, 3336,    0, 3351, 3353, 3350,
        0, 3359, 3358, 3344, 3363, 3349, 3350, 3358, 3368, 3362,
        0, 3373, 3375, 3375,    0, 3363, 3383,    0, 3387, 3383,
     3385, 3397, 3388, 3393, 3399, 3409, 3422, 3425, 3439, 3441,
     3443, 3437, 3433, 3451, 3467, 3479, 3473, 3489, 3491, 3492,
     3497, 3507, 3521, 3505, 3513, 3531, 3543, 3545, 3555, 3547,
     3556, 3561, 3571, 3577, 3599, 3593, 3587, 3609, 3610, 3585,
     3615, 3633, 3623, 3631, 3647, 3639, 3641, 3644, 3649, 3663,
     3665, 3677, 3689, 3679, 3687, 3693, 3701, 3703, 3711, 3717,

     3719, 3741, 3733, 3735, 3743, 3747, 3749, 3775, 3757, 3772,
     3786, 3789, 3800, 3801, 3791, 3823, 3797, 3825, 3835, 3826,
     3829, 3840, 3868, 3831,    0,    0,    0, 3382, 3428, 3508,
     3523,    0, 3648,    0, 3680, 3738, 3841, 3842,    0, 3866,
        0, 3867,    0,    0,    0, 3869,    0, 3856, 3870, 3866,
     3862,    0,    0,    0,    0, 3880,    0, 3867, 3883,    0,
        0, 3878, 3884,    0,    0, 3874, 3889, 3890, 3877, 3890,
        0, 3902, 3889,    0,    0,    0,    0, 3909, 3908, 3896,
     3912,    0,    0,    0,    0, 3901, 3917, 3919, 3922, 3925,
     3923, 3928, 3933, 3931, 3956, 3957, 3967, 3959, 3991, 3981,

     3965, 4002, 3968, 4007, 3993, 3997, 4010, 4019, 4021, 4035,
     4043, 4033, 4052, 4031, 4056, 4061, 4064, 4086, 4073, 4089,
     4087, 4095, 4097, 4098, 4119, 4110, 4123, 4138, 4147, 4152,
     4135, 4164, 4141, 4177, 4149, 4181, 4186, 4187, 4189, 4219,
     4198, 4210, 4221, 4229, 4231, 4232, 4235, 4240,    0,    0,
        0,    0,    0,    0, 3971, 4069,    0, 4101, 4089,    0,
        0, 4118,    0, 4195,    0,    0, 4219,    0,    0, 4227,
     4228, 4234,    0, 4263, 4248,    0, 4256, 4251,    0, 4271,
        0, 4272, 4273, 4274, 4275, 4277, 4283, 4285, 4311, 4286,
     4289, 4308, 4317, 4325, 4339, 4326, 4327, 4329, 4340, 4343,

     4342, 4351, 4357, 4381, 4379, 4365, 4382, 4396, 4383, 4397,
     4413, 4394, 4400, 4419,    0, 4380,    0,    0, 4423, 4435,
     4420, 4423, 4428, 4440, 4445,    0, 4437,  130, 4450, 4450,
     4453, 4451, 4454, 4465, 4483, 4484, 4493, 4487, 4488, 4502,
     4505, 4516, 4519, 4538, 4459,    0,    0,    0, 4477,    0,
        0, 4507,    0, 4518,    0, 4542, 4547, 4550, 4553, 4561,
     4556, 4559, 4578, 4584, 4587, 4590,    0,    0,    0, 4528,
     4595, 4596, 4601, 4609, 4524, 4612, 4527, 4626, 4581, 4630,
     4611, 4641, 4634, 4663,    0, 4638, 4759, 4728, 4733,  152,
     4738, 4743, 4748, 4753

    } ;

static const flex_int16_t yy_def[1195] =
    {   0,
     1187,    1, 1188, 1188, 1187,    5, 1187, 1187, 1187, 1187,
     1187, 1189, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1187, 1191, 1187, 1192, 1192, 1187,
     1192, 1193, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1194, 1194,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1192, 1187, 1187, 1189, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1187, 1191, 1187, 1192, 1192, 1192, 1193, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1192, 1187, 1187, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1192, 1192,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1190, 1190, 1190, 1190,
       62,   62,   62,   62, 1190,   62, 1190,   62, 1190,   62,
     1190,   62, 1190,   62, 1190,   62,    0, 1187, 1187, 1187,
     1187, 1187, 1187, 1187

    } ;

static const flex_int16_t yy_nxt[4826] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   77,   84,   77,   48,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   77,
       84,   85,   86,   86,   86,   86,   89,  105,   90,   92,
       90,   93,   94,   98,   99,  140,  100,  138,  129,  132,
      181,  139,  101,  285,  102,  130,   97,  106,  103,  104,
      189,  131,  190,  133,  105,  179,  180,  186,   86, 1154,
       98,   99,  140,  100,  138,  129,  132,  181,  139,  101,
      285,  102,  130,  177,  106,  103,  104,  107,  131,  134,
      133,  178,  179,  180,  108,  141,  135,  136,  286,  142,

      403,  109,  137,  143,  110,  111,  284,  112,  403,  144,
      177,   86,   86,  148,  107,  191,  134,  402,  178,  192,
      190,  108,  141,  135,  136,  286,  142,  149,  109,  137,
      143,  110,  111,  150,  112,  113,  144,  145,  284,  114,
      148,  146,  159,  115,  156,  240,  160,  147,  287,  116,
      161,  291,  117,   91,  149,  157,  162,  193,  194,  283,
      150,  158,  113,  282,  145,  197,  114,  292,  146,  159,
      115,  156,  240,  160,  147,  287,  116,  161,  291,  117,
      118,  197,  157,  162,  163,  174,  164,  175,  158,  165,
      176,  119,  197,  120,  292,  232,  166,  293,  121,  197,

      196,  197,  195,  122,   86,   86,  191,  118,  197,  233,
      185,  163,  174,  164,  175,  187,  165,  176,  119,  197,
      120,  184,  232,  166,  293,  121,  197,  229,  197,  197,
      122,  123,  279,  280,  230,  281,  233,   92,   90,  124,
      231,  306,  125,  197,  307,  126,  197,  197,  127,  197,
      316,  128,  182,  238,  229,  197,  197,  239,  123,  279,
      280,  230,  281,  197,  186,   86,  124,  231,  306,  125,
      197,  307,  126,   96,  197,  127,  197,  316,  128,  151,
      238,   95,  197,  317,  239,  314,  315,  152,  245,  288,
      197,  153,  246,  154,  155,  192,  190,  289,  247,   91,

      290,  299,   87, 1187,  297,  300,  151,  304,  197,   47,
      317,  298,  314,  315,  152,  245,  288,  305,  153,  246,
      154,  155,  167,  168,  289,  247,  169,  290,  299,  170,
      171,  297,  300,  318,  304,  197,  172,  308,  298,  173,
       47, 1187,  309, 1187,  305, 1187, 1187, 1187, 1187,  167,
      168, 1187, 1187,  169, 1187, 1187,  170,  171, 1187, 1187,
      318, 1187,  319,  172,  308, 1187,  173,  185,  185,  309,
      185,  185,  185,  185,  185,  185,  277,  185,  185,  185,
      197,  310,  198,  199,  278,  200,  311,  294,  295,  319,
      320,  201,  312,  202,  301,  302,  303,  203,  204,  313,

      197,  296,  321,  277,  325, 1187, 1187,  197,  310,  198,
      199,  278,  200,  311,  294,  295, 1187,  320,  201,  312,
      202,  301,  302,  303,  203,  204,  313,  197,  296,  321,
      328,  325,  185,  185,  185,  331,  185,  185,  185,  185,
      185,  185,  322,  185,  185,  185,  326,  329,  323,  332,
      205,  333,  327,  330,  334,  335,  338,  328,  336,  324,
      339,  337,  331,  344,  345,  346,  347, 1187,  348,  322,
      206, 1187, 1187,  326,  329,  323,  332,  205,  333,  327,
      330,  334,  335,  338,  349,  336,  324,  339,  337, 1187,
      344,  345,  346,  347,  340,  348, 1187,  206,  185,  207,

      350,  355,  351,  197,  341,  352,  208,  353,  356,  342,
      343,  349,  357,  209,  358,  359,  210,  211,  354,  212,
      360,  340,  361,  197, 1187,  362,  207,  350,  355,  351,
      197,  341,  352,  208,  353,  356,  342,  343, 1187,  357,
      209,  358,  359,  210,  211,  354,  212,  360, 1187,  361,
      197,  213,  362,  363,  364,  214,  365,  366,  367,  215,
      369,  370,  368,  373,  374,  216,  375,  379,  217,  371,
      380,  381,  382,  383,  372,  197, 1187,  384,  213, 1187,
      363,  364,  214,  365,  366,  367,  215,  369,  370,  368,
      373,  374,  216,  375,  379,  217,  371,  380,  381,  382,

      383,  372,  197,  218,  384,  385,  376,  197,  389,  394,
      395,  398,  387,  386,  219,  377,  220,  388,  399,  396,
      390,  221,  400,  378, 1187,  397,  222,  197, 1187,  401,
      218, 1187,  385,  376,  197,  389,  394,  395,  398,  387,
      386,  219,  377,  220,  388,  399,  396,  390,  221,  400,
      378,  391,  397,  222,  197,  223,  401,  197,  392,  197,
     1187,  393,  521,  224, 1187, 1187,  225,  197,  522,  226,
      523, 1187,  227,  524,  525,  228, 1187,  197,  391,  197,
     1187, 1187,  223,  197,  197,  392,  197,  197,  393,  521,
      224,  405,  197,  225,  197,  522,  226,  523,  404,  227,

      524,  525,  228,  197,  197,  526,  197,  197,  234,  197,
      197, 1187,  197,  197,  197,  235,  236, 1187,  405,  197,
      527,  237,  528,  529,  406,  404,  411,  197, 1187,  197,
      197, 1187,  526,  197,  197,  234,  197,  410,  197,  197,
      197, 1187,  235,  236,  412, 1187,  197,  527,  237,  528,
      529,  406, 1187,  411,  197,  241,  197,  423,  197,  242,
      197,  197, 1187,  243,  410,  197,  197,  424,  416,  244,
     1187,  412,  197,  197,  418,  417, 1187,  197,  419,  197,
     1187,  197,  241, 1187,  423,  197,  242,  533,  197,  425,
      243, 1187,  197,  197,  424,  416,  244,  197,  197,  197,

     1187,  418,  417,  197,  197,  419,  197,  248,  197, 1187,
      426,  197,  534, 1187,  533,  197,  425,  197,  427,  197,
      197,  249,  537,  428,  197,  197, 1187,  250,  433,  434,
      197,  197, 1187, 1187,  248,  197,  435,  426,  197,  534,
      197, 1187,  197, 1187,  197,  427,  197,  197,  249,  537,
      428,  197, 1187,  444,  250,  433,  434,  538,  197,  197,
      251,  436,  197,  435,  439,  197,  197,  197,  252, 1187,
      197,  197,  253,  197,  254,  255, 1187,  451,  197,  197,
      444,  437, 1187,  197,  538,  197,  197,  251,  436, 1187,
      197,  439,  197,  197,  440,  252,  197,  197,  197,  253,

      197,  254,  255,  197,  451,  539,  197,  256,  437,  197,
      197,  197,  197,  540,  438,  197,  197,  197,  257,  447,
      197,  440,  445,  197,  258, 1187,  541,  197,  446,  197,
      197,  197,  539, 1187,  256,  197,  197,  197,  197,  544,
      540,  438,  197,  197,  448,  257,  447,  197, 1187,  445,
      449,  258,  197,  541, 1187,  446,  197,  197,  197,  259,
      197,  452,  197,  260,  197,  197,  544,  261,  545,  548,
      450,  448,  197,  262, 1187,  453,  549,  449, 1187,  197,
      197,  197, 1187,  197,  197,  197,  259,  197,  452, 1187,
      260,  454,  197, 1187,  261,  545,  548,  450, 1187,  197,

      262,  197,  453,  549,  197,  197, 1187,  197,  197,  197,
      197,  263,  197,  264,  550,  551,  265, 1187,  454,  455,
      457,  552,  456,  266,  197,  197, 1187, 1187,  197,  197,
     1187,  197,  197,  197, 1187, 1187,  197, 1187,  263,  197,
      264,  550,  551,  265,  197,  553,  455,  457,  552,  456,
      266,  197,  197,  197,  197,  458,  197,  464, 1187,  466,
      197,  267,  268,  463,  197,  269,  197,  197,  270,  271,
      554,  197,  553,  197,  197,  272,  555,  465,  273,  197,
      197,  197,  458, 1187,  464,  197,  466,  197,  267,  268,
      463,  197,  269,  467,  197,  270,  271,  554,  535,  197,

      197,  197,  272,  555,  465,  273,  197,  536,  197,  468,
      197, 1187,  197,  197,  197, 1187,  469, 1187,  470,  197,
      467,  558,  274,  559,  275,  535,  197,  276,  197,  560,
      197, 1187,  474,  197,  536,  197,  468,  197,  197,  197,
      197, 1187,  197,  469,  197,  470,  197,  475,  558,  274,
      559,  275, 1187,  476,  276,  197,  560,  197,  197,  474,
      197,  197,  197, 1187,  197,  197,  197,  561,  407,  197,
      197,  197,  197, 1187,  475,  562,  408,  479,  197,  409,
      476,  197, 1187, 1187, 1187,  197, 1187,  477,  197,  197,
      197,  197,  197,  478,  561,  407, 1187,  197,  197,  197,

      481,  197,  562,  408,  479,  197,  409, 1187,  197,  197,
      413,  414,  197,  480,  477,  197, 1187,  197,  482,  197,
      478,  197, 1187,  197,  415,  197,  197,  481,  197,  197,
     1187, 1187,  197,  498,  197,  197,  197,  413,  414,  197,
      480,  483,  197,  197,  563,  482,  197,  484,  197,  197,
      197,  415, 1187,  197,  197,  564,  197,  197,  488,  197,
      498,  197,  197,  485,  420,  421,  422,  197,  483,  197,
      197,  563, 1187,  197,  484,  486,  197,  197, 1187,  487,
      197,  197,  564, 1187,  197,  488,  530,  197,  531, 1187,
      485,  420,  421,  422,  197,  197,  197,  197,  493,  492,

      197, 1187,  486,  532,  197,  429,  487,  197,  197,  197,
      430,  494, 1187,  530,  197,  531,  431,  197,  500,  503,
      197,  197,  197,  432,  197,  493,  492,  197,  197,  197,
      532,  517,  429,  499,  197,  197,  197,  430,  494,  197,
      197,  197,  197,  431,  197,  500,  503,  197,  197,  501,
      432,  197, 1187,  502,  197,  197,  197,  441,  517,  197,
      499,  197,  197,  442, 1187,  504,  197,  197,  197,  197,
     1187,  197, 1187,  505,  443,  565,  501,  506,  197,  197,
      502,  197,  507,  197,  441,  197,  197,  508, 1187,  197,
      442,  197,  504,  197,  566, 1187, 1187,  514,  197,  509,

      505,  443,  565,  197,  506, 1187,  197,  459,  197,  507,
      197, 1187,  197,  197,  508,  513,  197,  460,  197,  518,
      197,  566,  461,  462,  514,  197,  509,  567,  197, 1187,
      197, 1187,  515, 1187,  459,  197,  197,  520,  516,  197,
      197,  197,  513,  197,  460,  197,  518,  197, 1187,  461,
      462,  568,  197, 1187,  567,  197,  471,  569,  472,  515,
      197,  197,  519,  197,  520,  516,  197,  197,  197,  473,
      556,  542,  197,  570,  197,  543,  546,  557,  568,  571,
      197, 1187, 1187,  471,  569,  472,  572,  197,  197,  519,
     1187,  547,  573,  574,  197, 1187,  473,  556,  542,  575,

      570, 1187,  543,  546,  557,  576,  571,  197,  197,  489,
      577,  578,  580,  572,  581,  582,  583,  490,  547,  573,
      574,  579,  491,  584,  585,  586,  575,  587,  197, 1187,
      588, 1187,  576,  589,  590,  197,  489,  577,  578,  580,
      591,  581,  582,  583,  490,  592, 1187,  593,  579,  491,
      584,  585,  586,  594,  587,  197,  495,  588,  197,  595,
      589,  590,  596,  597,  598,  496,  599,  591,  600,  602,
      603,  604,  592,  497,  593,  605,  606,  607,  197, 1187,
      594,  608, 1187,  495,  609,  197,  595,  601,  610,  596,
      597,  598,  496,  599,  611,  600,  602,  603,  604,  612,

      497,  613,  605,  606,  607,  197,  510,  614,  608,  197,
      615,  609,  616,  511,  601,  610,  512,  617,  618,  619,
      620,  611,  621,  622,  623,  624,  612,  627,  613,  197,
      625,  628,  626,  510,  614,  629,  197,  615,  630,  616,
      511,  631,  632,  512,  617,  618,  619,  620,  635,  621,
      622,  623,  624,  636,  627,  753,  197,  625,  628,  626,
      633,  197,  629,  197,  634,  630,  638,  637,  631,  632,
     1187, 1187,  197,  640, 1187,  635,  639,  197,  197,  754,
      636,  197,  753,  197, 1187,  641,  197,  633,  197,  197,
      197,  634,  197,  638,  637,  197,  197,  197,  197,  197,

      640,  197, 1187,  639,  197,  197,  754, 1187,  197,  197,
      197,  642,  641,  197,  197,  197,  197,  197,  643,  197,
      197,  197,  197,  197,  197,  197, 1187,  645,  197,  646,
      197,  647, 1187,  755,  197,  644,  197,  197,  642,  756,
      197,  197,  197,  649,  197,  643,  648,  197,  197,  757,
      197,  197,  197,  650,  645,  197,  646,  197,  647,  651,
      755,  197,  644,  197,  197,  758,  756,  197,  652,  197,
      649,  653,  197,  648,  197,  197,  757,  197,  197,  197,
      650,  655,  197,  197,  654,  197,  651,  197,  656,  197,
      197, 1187,  758,  197,  197,  652,  197, 1187,  653,  197,

      658,  197,  197,  197,  659,  197,  657,  197,  655,  665,
      197,  654,  197,  197,  197,  656,  197, 1187,  197, 1187,
      197,  197,  661,  197,  197,  660,  197,  658,  662,  197,
      197,  659,  197,  657,  197,  664,  665,  197,  197,  197,
      197,  670, 1187,  663,  667,  197,  197,  197,  197,  661,
      197,  197,  660,  197,  666,  662,  197,  197,  197,  197,
      197,  197,  664,  669,  197,  197,  197,  197,  670,  668,
      663,  667,  197,  197,  197,  197, 1187,  197,  197,  671,
      197,  666,  672,  197,  197,  197,  197,  197,  197,  673,
      669,  674,  197, 1187,  197,  197,  668,  197, 1187,  197,

      197,  677,  197,  197,  197,  197,  671,  197,  675,  672,
      197,  197,  681,  679,  676,  197,  673,  197,  674,  197,
      197,  197,  197,  759,  197,  678,  197,  197,  677,  197,
      197,  197,  197,  680,  684,  675, 1187,  197,  197,  681,
      679,  676,  197,  197,  197, 1187,  197,  197,  197,  197,
      759,  682,  678,  197,  197,  197,  683,  760,  197,  197,
      680,  684,  685,  197,  197,  197,  197, 1187,  197,  197,
      197,  686,  688,  197,  197,  197,  197,  687,  682,  689,
     1187,  197,  197,  683,  760,  197,  197,  197,  197,  685,
      197,  691,  197,  197,  197,  197,  197,  690,  686,  688,

      692,  197,  197,  693,  687, 1187,  689,  197,  197,  694,
     1187,  197,  197,  197,  197,  197, 1187,  197,  691,  695,
      197,  197,  197,  197,  690, 1187,  761,  692,  197,  197,
      693,  697,  197,  696,  197,  197,  694,  197,  197, 1187,
      762,  698,  197,  701,  197, 1187,  695,  197, 1187,  197,
      197,  197,  197,  761, 1187,  197,  197,  197,  697,  197,
      696,  197, 1187,  197,  197,  702,  699,  762,  698,  197,
      701,  197,  700,  703,  197,  197, 1187,  197,  197,  197,
     1187,  197,  704,  197,  197,  705,  197,  197,  197,  706,
      197,  707,  702,  699,  197,  197, 1187, 1187,  197,  700,

      703,  197,  197,  197,  197,  197,  197,  197,  197,  704,
      197,  197,  705,  197,  197,  197,  706,  197,  707,  713,
      708,  197,  197,  197,  711,  197,  710,  709,  714,  712,
      197,  197,  197,  197,  197,  197, 1187,  197,  197,  197,
      715, 1187,  197,  197,  197,  763,  713,  708,  197, 1187,
      197,  711,  197,  710,  709,  714,  712,  716,  197,  197,
      197,  197,  197,  719,  197,  197,  197,  715,  718,  197,
      197,  197,  763,  721,  722,  197,  717,  720,  723,  197,
     1187,  197,  197, 1187,  716,  197,  197,  197,  197,  197,
      719,  197,  197,  727,  197,  718,  197,  197,  197,  197,

      721,  722,  197,  717,  720,  723,  197,  197,  197,  197,
      725,  726,  197,  197,  724,  197,  197,  197,  197,  197,
      727,  197, 1187,  729,  197,  728,  197,  197,  197,  197,
     1187,  197, 1187, 1187,  197,  197,  197,  725,  726,  736,
      197,  724,  197,  197,  197,  197,  197,  737,  197,  730,
      729,  197,  728,  197,  197,  197,  197,  197,  197,  197,
      731, 1187,  197,  197,  732,  197,  736,  197,  733, 1187,
      197,  764,  197,  197,  737,  197,  730,  197,  197,  197,
      197,  197,  197,  197,  197, 1187,  197,  731,  734, 1187,
      739,  732,  197,  197,  197,  733,  735,  765,  764,  197,

      197,  197,  197,  740,  197,  197,  197,  738,  197,  197,
      197, 1187,  744,  197, 1187,  734,  197,  739, 1187, 1187,
      197,  197,  197,  735,  765,  197,  197, 1187,  197,  197,
      740,  741,  197,  742,  738,  197,  197,  197,  746,  744,
      197,  197,  197,  197,  197,  743,  197,  766,  197,  197,
     1187,  767,  197,  745,  747,  197,  197,  197,  741,  752,
      742, 1187,  197,  197,  197,  746,  197,  197,  197,  197,
      751,  197,  743,  197,  766,  748,  197,  197,  767,  197,
      745,  747,  197,  197,  197,  768,  752,  197,  749,  769,
      770,  197,  750,  197,  197,  771,  772,  751,  773,  197,

      774,  775,  748,  197,  197,  776,  197,  777,  778,  779,
      780,  781,  768,  782,  197,  749,  769,  770,  783,  750,
      784,  785,  771,  772,  786,  773,  197,  774,  775,  787,
      788,  789,  776,  790,  777,  778,  779,  780,  781,  791,
      782,  792,  793,  794,  795,  783,  796,  784,  785,  799,
      797,  786,  800,  801,  802,  805,  787,  788,  789,  806,
      790,  798,  803,  804,  807,  808,  791,  809,  792,  793,
      794,  795,  810,  796,  811,  812,  799,  797,  813,  800,
      801,  802,  805,  814,  815,  816,  806,  817,  798,  803,
      804,  807,  808,  818,  809,  819,  820,  821,  822,  810,

      823,  811,  812,  824,  825,  813,  826,  827,  828,  829,
      814,  815,  816,  830,  817,  831,  832,  833,  834,  835,
      818,  836,  819,  820,  821,  822,  837,  823,  838,  197,
      824,  825,  197,  826,  827,  828,  829,  197,  197,  839,
      830,  197,  831,  832,  833,  834,  835,  197,  836,  197,
      840,  841,  842,  837, 1187,  838,  197,  197,  197,  197,
      844,  843,  197,  846,  197,  197,  839,  197,  197,  847,
     1187,  845,  197,  197,  197,  197,  197,  840,  841,  842,
     1187,  197,  197,  197,  197,  197,  197,  844,  843,  197,
      846,  197,  197,  197,  197,  197,  847,  848,  845,  197,

      197,  197,  197,  849, 1187, 1187,  197,  197,  197,  197,
      197,  197,  197,  197, 1187,  197,  851, 1187,  197,  197,
      197,  197,  197,  850,  848,  855,  197,  197,  197,  197,
      849,  197,  197,  197,  197,  197,  853, 1187,  197,  197,
      854,  197,  197,  851,  852,  197,  197, 1187,  197,  197,
      850,  197,  855,  197,  197,  925,  197,  856,  197,  197,
      197,  926,  197,  853,  862,  197,  197,  854,  197, 1187,
      197,  852,  197,  197,  197,  860,  197,  857,  197,  197,
      197,  858,  925,  197,  856,  197,  197,  197,  926,  859,
      197,  862,  197,  197,  197,  197,  861,  197, 1187,  197,

      197,  197,  860,  197,  857,  197,  197,  197,  858,  863,
      197,  197,  197,  197,  197,  197,  859,  197,  864,  927,
      197,  197,  197,  861,  197,  197,  197,  197,  197,  928,
      197,  197,  197,  197,  197,  865,  863,  870,  197,  866,
     1187,  197,  197, 1187,  197,  864,  927,  197,  197,  867,
      197,  197,  197,  197,  197,  197,  928,  197,  197,  869,
      197,  197,  865,  197,  870,  868,  866,  197, 1187,  197,
      197,  197, 1187,  197,  197,  197,  867,  197,  197,  873,
      197,  197,  871,  197,  197, 1187,  869,  197,  872,  197,
      197,  197,  868,  197,  197,  874,  197,  197,  197,  197,

      197,  197,  929,  876,  197,  197,  873,  197,  197,  871,
      197,  197,  197,  930,  197,  872,  197,  875,  197,  197,
      197,  197,  874,  877,  197,  197,  197,  197,  197,  929,
      876,  197,  197,  197,  197,  197,  197, 1187,  197,  197,
      930,  197,  878, 1187,  875,  197,  197,  197,  197,  879,
      877,  197, 1187,  197,  197,  197,  197,  197,  197,  197,
      197, 1187,  197,  197,  880,  197, 1187,  197,  197,  878,
      881,  882,  197,  197,  197,  883,  879,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  884,  197,  885,  197,
      197,  880,  197,  197,  197, 1187,  197,  881,  882,  197,

      197,  197,  883,  931,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  884,  197,  885,  197,  197,  932, 1187,
      197,  197,  197,  197,  888, 1187,  197,  886,  197,  887,
      931,  197,  197, 1187,  197,  895,  933,  197,  197,  197,
     1187,  197,  197,  197,  197,  932,  197,  197,  197,  197,
      891,  888,  197, 1187,  886,  197,  887, 1187,  197,  197,
      889,  890,  895,  933,  197,  892,  197,  197,  197,  197,
      197,  197,  197,  197,  197, 1187,  197,  891,  894,  197,
      893, 1187,  197,  896,  197, 1187,  934,  889,  890,  197,
      197,  197,  892,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  897,  197,  900,  894,  899,  893,  898,  197,
      896,  197,  901,  934,  903,  197,  197,  197,  197, 1187,
      197,  197,  197,  197,  197,  197,  902,  197,  197,  897,
      197,  900,  197,  899,  197,  898,  197,  904,  197,  901,
      197,  903,  197,  197,  197,  197,  905,  197,  197,  197,
      197,  197,  197,  902,  197,  907,  906,  197,  197,  197,
      197,  197,  908,  197,  904,  197,  197,  197,  911,  197,
      197,  197,  197,  905,  197,  909,  197,  197,  910,  197,
      197,  197,  907,  906,  912,  197,  197,  197,  197,  908,
      197, 1187,  197,  197,  197,  911,  197,  197,  935,  197,

      197,  197,  909,  197,  197,  910,  197,  197,  197,  197,
      915,  912,  197,  197,  197,  197, 1187,  197,  914,  197,
      913,  197,  197,  197,  197,  935,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  915,  916,  197,
      922,  197,  197,  917,  197,  914,  936,  913,  918,  197,
      197,  197,  197,  197,  197,  197,  197, 1187,  919,  197,
      197,  197,  197,  197,  197,  916,  920,  922,  924,  197,
      917,  197,  197,  936,  921,  918,  197,  197,  197,  197,
      923,  197,  197,  197,  197,  919,  197,  197,  197,  197,
      197,  197,  197,  920,  937,  924,  197,  197,  197,  197,

      938,  921,  939,  197,  197,  940,  197,  923,  941,  197,
      197,  197,  942,  197,  943,  197,  944,  945,  946,  197,
      947,  937,  948,  197,  197,  949,  950,  938,  951,  939,
      952,  953,  940,  197,  954,  941,  955,  956,  957,  942,
      958,  943,  959,  944,  945,  946,  960,  947,  961,  948,
      962,  963,  949,  950,  964,  951,  965,  952,  953,  966,
      967,  954,  968,  955,  956,  957,  969,  958,  970,  959,
      971,  972,  973,  960,  974,  961,  975,  962,  963,  976,
      977,  964,  978,  965,  979,  980,  966,  967,  981,  968,
      982,  983,  984,  969,  985,  970,  986,  971,  972,  973,

      197,  974,  197,  975,  197,  197,  976,  977, 1049,  978,
      989,  979,  980,  987,  197,  981,  197,  982,  983,  984,
      197,  985,  197,  986,  197,  197,  990,  197,  988,  197,
      197,  197,  197, 1187,  197, 1049,  197,  989,  991,  197,
      987,  197,  197,  197, 1187, 1050,  197,  197, 1187,  197,
      996,  197,  197,  990,  197,  988,  197,  197,  197,  197,
      197,  197,  197,  197,  995,  991,  197,  993,  197,  197,
      197,  992, 1050,  197,  197,  994,  197,  996,  197, 1187,
      197,  197, 1187,  197,  197,  197,  197,  197,  197,  197,
      197,  995,  998,  997,  993,  197,  197,  197,  992, 1187,

      999,  197,  994,  197,  197,  197,  197,  197, 1001,  197,
      197,  197, 1187, 1000,  197,  197,  197,  197, 1002,  998,
      997, 1187, 1005,  197,  197, 1051,  197,  999,  197,  197,
     1006,  197, 1187,  197,  197, 1001,  197,  197,  197, 1003,
     1000,  197,  197,  197,  197, 1002, 1187, 1004,  197, 1005,
      197,  197, 1051,  197, 1052,  197,  197, 1006,  197, 1008,
      197,  197,  197, 1007,  197,  197, 1003, 1187,  197,  197,
     1010,  197,  197,  197, 1004,  197, 1009,  197,  197, 1187,
      197, 1052,  197, 1187,  197,  197, 1008,  197,  197,  197,
     1007,  197,  197,  197,  197,  197, 1012, 1010,  197,  197,

      197, 1187, 1018, 1009,  197,  197, 1011,  197,  197,  197,
      197,  197, 1013, 1187,  197,  197,  197, 1014, 1015,  197,
      197,  197,  197, 1012,  197,  197,  197,  197, 1016, 1018,
      197,  197,  197, 1011, 1187,  197,  197,  197, 1187, 1013,
     1020,  197, 1017,  197, 1014, 1015,  197,  197,  197,  197,
      197,  197,  197,  197,  197, 1016,  197,  197,  197,  197,
      197,  197, 1021,  197,  197, 1019,  197, 1020,  197, 1017,
      197, 1022, 1053,  197,  197,  197,  197,  197,  197,  197,
     1023,  197,  197,  197,  197,  197,  197,  197,  197, 1021,
     1024,  197, 1019,  197,  197,  197,  197,  197, 1022, 1053,

      197, 1187,  197,  197,  197,  197,  197, 1023,  197,  197,
      197,  197, 1054,  197,  197, 1025,  197, 1024,  197, 1026,
      197,  197, 1187,  197,  197, 1187,  197,  197, 1028,  197,
      197,  197, 1027,  197,  197, 1030,  197,  197,  197, 1054,
      197,  197, 1025,  197, 1187,  197, 1026,  197,  197, 1029,
      197,  197, 1032,  197,  197, 1028,  197,  197,  197, 1027,
     1033,  197, 1030,  197,  197,  197,  197,  197, 1034, 1055,
      197, 1031,  197, 1036,  197,  197, 1029,  197,  197, 1032,
      197,  197, 1187,  197,  197,  197,  197, 1033, 1035,  197,
     1187,  197,  197,  197,  197, 1034, 1055,  197, 1031,  197,

     1036,  197, 1038,  197, 1037,  197,  197,  197, 1042,  197,
     1187,  197,  197,  197,  197, 1035,  197,  197,  197,  197,
     1039,  197, 1187,  197, 1187, 1187,  197, 1041,  197, 1038,
      197, 1037, 1040,  197,  197, 1042,  197,  197,  197,  197,
      197,  197, 1044, 1046,  197,  197,  197, 1039,  197, 1043,
      197, 1045,  197,  197, 1041,  197, 1056,  197, 1187, 1040,
      197,  197,  197,  197,  197,  197,  197,  197,  197, 1044,
     1046, 1047,  197,  197, 1057,  197, 1043,  197, 1045,  197,
     1058, 1048, 1059, 1056,  197,  197, 1060,  197, 1061,  197,
      197, 1062, 1063,  197, 1064,  197, 1065, 1066, 1047,  197,

     1067, 1057, 1068, 1069,  197,  197, 1070, 1058, 1048, 1059,
     1071, 1072,  197, 1060, 1073, 1061, 1074, 1075, 1062, 1063,
     1076, 1064, 1077, 1065, 1066, 1078, 1079, 1067, 1080, 1068,
     1069, 1081,  197, 1070,  197, 1187,  197, 1071, 1072,  197,
     1083, 1073,  197, 1074, 1075, 1084, 1187, 1076,  197, 1077,
      197, 1082, 1078, 1079,  197, 1080,  197, 1187, 1081,  197,
      197,  197,  197,  197, 1085,  197,  197, 1083,  197,  197,
      197, 1187, 1084,  197,  197,  197,  197,  197, 1082, 1187,
     1086,  197,  197,  197,  197,  197,  197,  197, 1115,  197,
     1088, 1085,  197,  197,  197,  197,  197,  197,  197, 1087,

      197,  197,  197,  197,  197,  197, 1089, 1086,  197,  197,
      197,  197,  197, 1090,  197, 1115, 1091, 1088,  197,  197,
      197,  197, 1092,  197,  197,  197, 1087,  197,  197,  197,
      197,  197,  197, 1089,  197,  197, 1093,  197,  197,  197,
     1090,  197, 1187, 1091,  197,  197,  197,  197,  197, 1092,
      197,  197,  197, 1187,  197,  197,  197,  197,  197, 1096,
      197,  197, 1187, 1093, 1095,  197,  197, 1094,  197,  197,
      197,  197,  197,  197,  197,  197, 1187,  197,  197,  197,
      197,  197, 1116,  197, 1097,  197, 1096,  197, 1187,  197,
      197, 1095, 1187,  197, 1094,  197,  197,  197,  197,  197,

      197,  197, 1098,  197, 1100,  197,  197,  197,  197, 1116,
      197, 1097,  197, 1187,  197,  197,  197,  197, 1117, 1099,
      197, 1118, 1101,  197,  197,  197,  197,  197,  197, 1098,
      197, 1100,  197,  197,  197,  197,  197,  197, 1102,  197,
      197,  197,  197, 1187, 1119, 1117, 1099,  197, 1118, 1101,
      197,  197,  197,  197,  197,  197,  197, 1187,  197,  197,
      197,  197,  197,  197,  197, 1102,  197,  197, 1104,  197,
     1103, 1119, 1106, 1105,  197,  197, 1187, 1187,  197,  197,
     1109,  197,  197,  197,  197,  197,  197,  197, 1187,  197,
     1107,  197, 1108,  197,  197, 1104,  197, 1103,  197, 1106,

     1105,  197,  197,  197,  197,  197,  197, 1109,  197, 1187,
     1187,  197, 1120,  197,  197, 1111,  197, 1107,  197, 1108,
     1187,  197, 1187,  197,  197,  197,  197,  197,  197, 1187,
      197,  197, 1110,  197, 1121,  197,  197, 1113,  197, 1120,
     1112,  197, 1111, 1187, 1122,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197, 1123,  197,  197,  197, 1110,
     1124, 1121,  197,  197, 1113,  197,  197, 1112,  197,  197,
     1114, 1122,  197,  197,  197,  197,  197,  197, 1125,  197,
     1126, 1127, 1123,  197,  197,  197, 1128, 1124, 1129,  197,
      197,  197,  197,  197,  197,  197,  197, 1114, 1187,  197,

      197, 1187, 1130,  197,  197, 1125, 1132, 1126, 1127,  197,
      197,  197,  197, 1128,  197, 1129,  197,  197,  197,  197,
      197,  197,  197,  197, 1131,  197,  197,  197,  197, 1130,
      197, 1187, 1187, 1132,  197, 1187,  197,  197,  197,  197,
     1133,  197,  197,  197, 1135,  197,  197,  197,  197,  197,
      197, 1131,  197,  197,  197,  197,  197,  197, 1136,  197,
      197,  197,  197,  197,  197, 1134,  197, 1133,  197,  197,
      197, 1135,  197,  197, 1137,  197,  197,  197, 1187,  197,
      197,  197,  197,  197,  197, 1136,  197,  197,  197,  197,
      197,  197, 1134,  197,  197,  197,  197, 1140,  197,  197,

      197, 1137,  197,  197,  197, 1139,  197,  197, 1138,  197,
     1187,  197, 1145,  197,  197,  197,  197, 1144,  197,  197,
      197,  197, 1142,  197, 1140,  197,  197,  197, 1141,  197,
      197,  197, 1139,  197,  197, 1138,  197,  197,  197, 1145,
      197,  197, 1146,  197, 1144,  197,  197,  197, 1143, 1142,
      197, 1147, 1148, 1149, 1150, 1141,  197,  197,  197, 1151,
      197,  197, 1152,  197,  197, 1153, 1155,  197,  197, 1146,
      197,  197, 1187, 1187, 1187, 1143, 1167,  197, 1147, 1148,
     1149, 1150,  197,  197, 1157, 1156, 1151,  197,  197, 1152,
      197,  197, 1153, 1155,  197,  197, 1187,  197,  197, 1158,

      197,  197,  197, 1167,  197,  197, 1187, 1162, 1168,  197,
      197, 1157, 1156, 1161,  197,  197, 1159,  197,  197, 1163,
      197,  197,  197, 1160,  197,  197, 1158,  197,  197,  197,
      197,  197,  197,  197, 1162, 1168,  197,  197, 1169,  197,
     1161, 1170,  197, 1159, 1164, 1175, 1163,  197,  197,  197,
     1160,  197,  197,  197, 1166,  197,  197,  197, 1165, 1171,
      197, 1177, 1179,  197,  197, 1169,  197,  197, 1170,  197,
      197, 1164, 1175,  197, 1187,  197,  197, 1187,  197,  197,
      197, 1166,  197,  197,  197, 1187, 1171,  197, 1177, 1179,
      197,  197, 1172,  197,  197,  197,  197,  197,  197, 1187,

      197,  197,  197,  197,  197,  197,  197,  197, 1181, 1173,
     1174,  197,  197,  197,  197,  197, 1187,  197,  197, 1172,
      197,  197,  197,  197,  197,  197, 1176,  197,  197,  197,
     1187,  197,  197,  197,  197, 1181, 1173, 1174,  197,  197,
      197, 1183,  197,  197, 1187,  197,  197,  197,  197, 1178,
     1185,  197, 1187, 1176,  197,  197,  197, 1182,  197,  197,
      197, 1180, 1187,  197, 1187,  197, 1187,  197, 1183, 1187,
      197, 1184, 1187,  197,  197,  197, 1178, 1185,  197, 1186,
      197, 1187,  197, 1187, 1182,  197, 1187, 1187, 1180, 1187,
      197, 1187, 1187, 1187,  197, 1187, 1187, 1187, 1184, 1187,

      197, 1187,  197, 1187, 1187,  197, 1186,  197, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187,  197,   46,   46,
       46,   46,   46,   88, 1187, 1187,   88,   88,  183,  183,
      183, 1187,  183,  185, 1187,  185,  185,  185,  188, 1187,
      188,  188,  188,  197, 1187,  197,  197,  197,    7, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187
    } ;

static const flex_int16_t yy_chk[4826] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   22,   15,   17,
       17,   18,   18,   21,   21,   31,   21,   30,   27,   28,
       44,   30,   21,   98,   21,   27, 1190,   22,   21,   21,
       55,   27,   55,   28,   22,   43,   43,   49,   49, 1128,
       21,   21,   31,   21,   30,   27,   28,   44,   30,   21,
       98,   21,   27,   42,   22,   21,   21,   23,   27,   29,
       28,   42,   43,   43,   23,   32,   29,   29,   99,   32,

      403,   23,   29,   32,   23,   23,  284,   23,  192,   32,
       42,   50,   50,   34,   23,  191,   29,  188,   42,   57,
       57,   23,   32,   29,   29,   99,   32,   34,   23,   29,
       32,   23,   23,   34,   23,   24,   32,   33,   92,   24,
       34,   33,   38,   24,   36,   71,   38,   33,  100,   24,
       38,  102,   24,   91,   34,   36,   38,   58,   58,   88,
       34,   36,   24,   85,   33,   71,   24,  103,   33,   38,
       24,   36,   71,   38,   33,  100,   24,   38,  102,   24,
       25,   77,   36,   38,   39,   41,   39,   41,   36,   39,
       41,   25,   71,   25,  103,   68,   39,  104,   25,   68,

       60,   77,   59,   25,   86,   86,   56,   25,   77,   68,
       52,   39,   41,   39,   41,   51,   39,   41,   25,   68,
       25,   47,   68,   39,  104,   25,   68,   67,   77,   83,
       25,   26,   83,   83,   67,   84,   68,   90,   90,   26,
       67,  111,   26,   70,  112,   26,   68,   67,   26,   83,
      116,   26,   45,   70,   67,   84,   83,   70,   26,   83,
       83,   67,   84,   70,  186,  186,   26,   67,  111,   26,
       70,  112,   26,   20,   67,   26,   83,  116,   26,   35,
       70,   19,   84,  117,   70,  115,  115,   35,   73,  101,
       70,   35,   73,   35,   35,  190,  190,  101,   73,   16,

      101,  108,   11,    7,  107,  108,   35,  110,   73,    4,
      117,  107,  115,  115,   35,   73,  101,  110,   35,   73,
       35,   35,   40,   40,  101,   73,   40,  101,  108,   40,
       40,  107,  108,  118,  110,   73,   40,  113,  107,   40,
        3,    0,  113,    0,  110,    0,    0,    0,    0,   40,
       40,    0,    0,   40,    0,    0,   40,   40,    0,    0,
      118,    0,  119,   40,  113,    0,   40,   61,   61,  113,
       61,   61,   61,   61,   61,   61,   82,   61,   61,   61,
       82,  114,   61,   61,   82,   61,  114,  105,  105,  119,
      120,   61,  114,   61,  109,  109,  109,   61,   61,  114,

       82,  105,  121,   82,  123,    0,    0,   82,  114,   61,
       61,   82,   61,  114,  105,  105,    0,  120,   61,  114,
       61,  109,  109,  109,   61,   61,  114,   82,  105,  121,
      125,  123,   61,   62,   62,  127,   62,   62,   62,   62,
       62,   62,  122,   62,   62,   62,  124,  126,  122,  128,
       62,  129,  124,  126,  130,  131,  133,  125,  132,  122,
      135,  132,  127,  137,  138,  139,  140,    0,  141,  122,
       62,    0,    0,  124,  126,  122,  128,   62,  129,  124,
      126,  130,  131,  133,  142,  132,  122,  135,  132,    0,
      137,  138,  139,  140,  136,  141,    0,   62,   62,   63,

      143,  145,  143,   63,  136,  144,   63,  144,  146,  136,
      136,  142,  147,   63,  148,  149,   63,   63,  144,   63,
      150,  136,  151,   63,    0,  153,   63,  143,  145,  143,
       63,  136,  144,   63,  144,  146,  136,  136,    0,  147,
       63,  148,  149,   63,   63,  144,   63,  150,    0,  151,
       63,   64,  153,  154,  155,   64,  156,  157,  158,   64,
      159,  160,  158,  161,  162,   64,  163,  165,   64,  160,
      166,  167,  168,  169,  160,   64,    0,  170,   64,    0,
      154,  155,   64,  156,  157,  158,   64,  159,  160,  158,
      161,  162,   64,  163,  165,   64,  160,  166,  167,  168,

      169,  160,   64,   65,  170,  171,  164,   65,  173,  175,
      176,  178,  172,  171,   65,  164,   65,  172,  179,  177,
      173,   65,  180,  164,    0,  177,   65,   65,    0,  181,
       65,    0,  171,  164,   65,  173,  175,  176,  178,  172,
      171,   65,  164,   65,  172,  179,  177,  173,   65,  180,
      164,  174,  177,   65,   65,   66,  181,  197,  174,   66,
        0,  174,  285,   66,    0,    0,   66,  206,  287,   66,
      289,    0,   66,  290,  292,   66,    0,  197,  174,   66,
        0,    0,   66,  198,  197,  174,   66,  206,  174,  285,
       66,  199,  199,   66,  206,  287,   66,  289,  198,   66,

      290,  292,   66,  198,  197,  294,   66,   69,   69,  200,
      198,    0,  199,  203,  206,   69,   69,    0,  199,  199,
      295,   69,  296,  297,  200,  198,  203,   69,    0,  200,
      198,    0,  294,  203,   69,   69,  200,  202,  202,  199,
      203,    0,   69,   69,  204,    0,  204,  295,   69,  296,
      297,  200,    0,  203,   69,   72,  200,  210,  202,   72,
      203,  207,    0,   72,  202,  202,  204,  210,  207,   72,
        0,  204,  211,  204,  208,  207,    0,  210,  208,   72,
        0,  207,   72,    0,  210,  202,   72,  299,  207,  211,
       72,    0,  211,  204,  210,  207,   72,  212,  208,  211,

        0,  208,  207,  213,  210,  208,   72,   74,  207,    0,
      212,   74,  300,    0,  299,  215,  211,  212,  213,  211,
      216,   74,  302,  213,  212,  208,    0,   74,  215,  215,
      213,   74,    0,    0,   74,  215,  216,  212,   74,  300,
      216,    0,  215,    0,  212,  213,  223,  216,   74,  302,
      213,  217,    0,  223,   74,  215,  215,  303,   74,   75,
       75,  217,  215,  216,  220,  220,  223,  216,   75,    0,
      228,  217,   75,  223,   75,   75,    0,  228,  217,   75,
      223,  218,    0,  218,  303,  220,   75,   75,  217,    0,
      228,  220,  220,  223,  221,   75,  221,  228,  217,   75,

      219,   75,   75,  218,  228,  304,   75,   76,  218,  225,
      218,   76,  220,  305,  219,  224,  221,  228,   76,  225,
      219,  221,  224,  221,   76,    0,  307,  219,  224,  225,
      218,   76,  304,    0,   76,  224,  225,  226,   76,  310,
      305,  219,  224,  221,  226,   76,  225,  219,    0,  224,
      226,   76,  229,  307,    0,  224,  225,  226,   76,   78,
      227,  229,  224,   78,  226,  230,  310,   78,  311,  313,
      227,  226,  229,   78,    0,  230,  314,  226,    0,  229,
      227,  231,    0,   78,  226,  230,   78,  227,  229,    0,
       78,  231,  230,    0,   78,  311,  313,  227,    0,  229,

       78,  231,  230,  314,  233,  232,    0,  227,  231,  234,
       78,   79,  230,   79,  315,  316,   79,    0,  231,  232,
      233,  317,  232,   79,  233,  232,    0,    0,  231,  234,
        0,  233,  232,   79,    0,    0,  234,    0,   79,  240,
       79,  315,  316,   79,  235,  318,  232,  233,  317,  232,
       79,  233,  232,  238,  237,  235,  234,  238,    0,  240,
       79,   80,   80,  237,  235,   80,  240,  239,   80,   80,
      319,  235,  318,  238,  237,   80,  321,  239,   80,  241,
      238,  237,  235,    0,  238,   80,  240,  239,   80,   80,
      237,  235,   80,  241,  239,   80,   80,  319,  301,  241,

      238,  237,   80,  321,  239,   80,  241,  301,  242,  242,
      243,    0,   80,   81,  239,    0,  243,    0,  243,  245,
      241,  323,   81,  324,   81,  301,  241,   81,  242,  325,
      243,    0,  245,   81,  301,  242,  242,  243,  246,  245,
       81,    0,  252,  243,  247,  243,  245,  246,  323,   81,
      324,   81,    0,  247,   81,  242,  325,  243,  246,  245,
       81,  201,  252,    0,  247,  246,  245,  326,  201,  252,
      250,  247,  248,    0,  246,  327,  201,  250,  249,  201,
      247,  201,    0,    0,    0,  246,    0,  248,  201,  252,
      250,  247,  248,  249,  326,  201,    0,  250,  249,  248,

      253,  253,  327,  201,  250,  249,  201,    0,  201,  205,
      205,  205,  251,  251,  248,  254,    0,  250,  254,  248,
      249,  253,    0,  265,  205,  249,  255,  253,  253,  205,
        0,    0,  251,  265,  256,  254,  205,  205,  205,  251,
      251,  255,  254,  265,  328,  254,  255,  256,  253,  259,
      265,  205,    0,  255,  256,  329,  205,  209,  259,  251,
      265,  256,  254,  257,  209,  209,  209,  257,  255,  259,
      265,  328,    0,  255,  256,  258,  259,  209,    0,  258,
      262,  256,  329,    0,  209,  259,  298,  257,  298,    0,
      257,  209,  209,  209,  257,  258,  259,  261,  262,  261,

      262,    0,  258,  298,  209,  214,  258,  262,  263,  214,
      214,  263,    0,  298,  257,  298,  214,  261,  267,  270,
      266,  267,  258,  214,  261,  262,  261,  262,  263,  214,
      298,  278,  214,  266,  269,  263,  214,  214,  263,  270,
      266,  267,  268,  214,  261,  267,  270,  266,  267,  268,
      214,  278,    0,  269,  269,  263,  214,  222,  278,  222,
      266,  269,  268,  222,    0,  271,  270,  266,  267,  268,
        0,  272,    0,  271,  222,  330,  268,  272,  278,  222,
      269,  269,  272,  273,  222,  271,  222,  273,    0,  268,
      222,  272,  271,  276,  331,    0,    0,  276,  272,  273,

      271,  222,  330,  273,  272,    0,  222,  236,  236,  272,
      273,    0,  271,  276,  273,  275,  275,  236,  272,  279,
      276,  331,  236,  236,  276,  277,  273,  332,  236,    0,
      273,    0,  277,    0,  236,  236,  275,  281,  277,  279,
      276,  281,  275,  275,  236,  277,  279,  280,    0,  236,
      236,  333,  277,    0,  332,  236,  244,  334,  244,  277,
      244,  281,  280,  275,  281,  277,  279,  280,  281,  244,
      322,  308,  277,  335,  280,  308,  312,  322,  333,  336,
      244,    0,    0,  244,  334,  244,  337,  244,  281,  280,
        0,  312,  338,  339,  280,    0,  244,  322,  308,  340,

      335,    0,  308,  312,  322,  341,  336,  244,  260,  260,
      342,  343,  344,  337,  345,  346,  348,  260,  312,  338,
      339,  343,  260,  349,  350,  351,  340,  352,  260,    0,
      353,    0,  341,  354,  355,  260,  260,  342,  343,  344,
      356,  345,  346,  348,  260,  357,    0,  358,  343,  260,
      349,  350,  351,  359,  352,  260,  264,  353,  264,  360,
      354,  355,  361,  362,  363,  264,  364,  356,  365,  366,
      367,  368,  357,  264,  358,  369,  370,  371,  264,    0,
      359,  372,    0,  264,  373,  264,  360,  365,  374,  361,
      362,  363,  264,  364,  375,  365,  366,  367,  368,  376,

      264,  377,  369,  370,  371,  264,  274,  379,  372,  274,
      380,  373,  381,  274,  365,  374,  274,  383,  384,  385,
      386,  375,  387,  389,  390,  391,  376,  393,  377,  274,
      392,  394,  392,  274,  379,  395,  274,  380,  396,  381,
      274,  397,  398,  274,  383,  384,  385,  386,  400,  387,
      389,  390,  391,  401,  393,  521,  274,  392,  394,  392,
      399,  405,  395,  404,  399,  396,  406,  404,  397,  398,
        0,    0,  407,  409,    0,  400,  408,  409,  410,  522,
      401,  405,  521,  404,    0,  411,  406,  399,  405,  411,
      404,  399,  407,  406,  404,  412,  408,  409,  410,  407,

      409,  413,    0,  408,  409,  410,  522,    0,  405,  411,
      404,  413,  411,  406,  414,  412,  411,  415,  414,  407,
      416,  413,  412,  408,  409,  410,    0,  416,  413,  417,
      418,  417,    0,  523,  414,  415,  411,  415,  413,  524,
      416,  414,  412,  418,  415,  414,  417,  416,  413,  525,
      418,  417,  420,  419,  416,  419,  417,  418,  417,  420,
      523,  414,  415,  421,  415,  526,  524,  416,  420,  422,
      418,  421,  420,  417,  424,  419,  525,  418,  417,  420,
      419,  423,  419,  421,  422,  423,  420,  425,  424,  422,
      421,    0,  526,  426,  424,  420,  422,    0,  421,  420,

      427,  424,  419,  428,  427,  423,  426,  425,  423,  433,
      421,  422,  423,  426,  425,  424,  422,    0,  429,    0,
      426,  424,  430,  428,  427,  429,  430,  427,  431,  433,
      428,  427,  423,  426,  425,  432,  433,  432,  429,  434,
      426,  438,    0,  431,  435,  429,  430,  435,  431,  430,
      428,  427,  429,  430,  434,  431,  433,  432,  436,  434,
      437,  438,  432,  437,  432,  429,  434,  435,  438,  436,
      431,  435,  439,  430,  435,  431,    0,  442,  436,  440,
      437,  434,  441,  440,  432,  436,  434,  437,  438,  441,
      437,  442,  439,    0,  435,  443,  436,  442,    0,  439,

      444,  445,  441,  440,  442,  436,  440,  437,  443,  441,
      440,  446,  449,  447,  444,  443,  441,  447,  442,  439,
      444,  445,  443,  527,  442,  446,  448,  444,  445,  441,
      440,  446,  449,  448,  452,  443,    0,  447,  446,  449,
      447,  444,  443,  450,  447,    0,  448,  444,  445,  451,
      527,  450,  446,  448,  452,  454,  451,  528,  446,  449,
      448,  452,  453,  450,  447,  453,  457,    0,  456,  451,
      450,  454,  456,  448,  455,  454,  451,  455,  450,  457,
        0,  452,  454,  451,  528,  453,  457,  458,  456,  453,
      450,  459,  453,  457,  455,  456,  451,  458,  454,  456,

      460,  455,  454,  461,  455,    0,  457,  458,  466,  462,
        0,  459,  453,  457,  458,  456,    0,  463,  459,  462,
      460,  455,  464,  461,  458,    0,  530,  460,  466,  462,
      461,  464,  465,  463,  458,  466,  462,  463,  459,    0,
      534,  465,  464,  469,  463,    0,  462,  460,    0,  464,
      461,  467,  465,  530,    0,  466,  462,  468,  464,  465,
      463,  470,    0,  469,  463,  470,  467,  534,  465,  464,
      469,  467,  468,  471,  471,  475,    0,  468,  467,  465,
        0,  470,  472,  473,  468,  473,  472,  474,  470,  474,
      469,  475,  470,  467,  471,  475,    0,    0,  467,  468,

      471,  471,  475,  473,  468,  476,  472,  474,  470,  472,
      473,  477,  473,  472,  474,  480,  474,  479,  475,  481,
      476,  471,  475,  478,  479,  476,  478,  477,  482,  480,
      473,  477,  476,  472,  474,  480,    0,  479,  477,  481,
      483,    0,  480,  478,  479,  535,  481,  476,  482,    0,
      478,  479,  476,  478,  477,  482,  480,  484,  477,  485,
      483,  484,  480,  486,  479,  486,  481,  483,  485,  487,
      478,  488,  535,  488,  489,  482,  484,  487,  490,  485,
        0,  484,  490,    0,  484,  486,  485,  483,  484,  487,
      486,  488,  486,  494,  489,  485,  487,  493,  488,  491,

      488,  489,  490,  484,  487,  490,  485,  492,  484,  490,
      492,  493,  486,  494,  491,  495,  487,  493,  488,  491,
      494,  489,    0,  496,  493,  495,  491,  492,  497,  490,
        0,  498,    0,    0,  492,  495,  501,  492,  493,  505,
      494,  491,  495,  496,  493,  499,  491,  506,  497,  498,
      496,  498,  495,  502,  492,  497,  501,  500,  498,  505,
      499,    0,  495,  501,  500,  499,  505,  506,  502,    0,
      496,  536,  499,  502,  506,  497,  498,  500,  498,  503,
      502,  507,  504,  501,  500,    0,  505,  499,  503,    0,
      509,  500,  499,  510,  506,  502,  504,  537,  536,  503,

      502,  507,  504,  510,  500,  508,  503,  508,  507,  504,
      509,    0,  513,  510,    0,  503,  513,  509,    0,    0,
      510,  511,  515,  504,  537,  508,  503,    0,  507,  504,
      510,  511,  508,  511,  508,  512,  513,  509,  515,  513,
      510,  511,  515,  513,  514,  512,  520,  538,  511,  515,
        0,  539,  508,  514,  516,  512,  516,  517,  511,  520,
      511,    0,  512,  513,  514,  515,  520,  519,  511,  515,
      519,  514,  512,  520,  538,  517,  516,  517,  539,  518,
      514,  516,  512,  516,  517,  540,  520,  519,  518,  541,
      542,  514,  518,  520,  519,  544,  545,  519,  546,  518,

      547,  548,  517,  516,  517,  549,  518,  550,  551,  555,
      556,  557,  540,  558,  519,  518,  541,  542,  559,  518,
      560,  562,  544,  545,  563,  546,  518,  547,  548,  564,
      565,  568,  549,  569,  550,  551,  555,  556,  557,  570,
      558,  572,  574,  575,  576,  559,  577,  560,  562,  580,
      578,  563,  586,  588,  590,  592,  564,  565,  568,  593,
      569,  578,  591,  591,  594,  595,  570,  596,  572,  574,
      575,  576,  597,  577,  598,  599,  580,  578,  600,  586,
      588,  590,  592,  601,  603,  604,  593,  605,  578,  591,
      591,  594,  595,  606,  596,  607,  608,  609,  611,  597,

      612,  598,  599,  613,  615,  600,  616,  620,  621,  622,
      601,  603,  604,  624,  605,  625,  626,  627,  628,  629,
      606,  630,  607,  608,  609,  611,  631,  612,  634,  637,
      613,  615,  640,  616,  620,  621,  622,  638,  639,  637,
      624,  641,  625,  626,  627,  628,  629,  642,  630,  637,
      638,  639,  640,  631,    0,  634,  637,  638,  639,  640,
      642,  641,  643,  644,  638,  639,  637,  642,  641,  646,
        0,  643,  645,  646,  642,  647,  637,  638,  639,  640,
        0,  648,  643,  644,  638,  639,  649,  642,  641,  643,
      644,  650,  645,  646,  642,  647,  646,  650,  643,  645,

      646,  648,  647,  651,    0,    0,  649,  651,  648,  643,
      644,  650,  653,  649,    0,  652,  653,    0,  650,  645,
      646,  655,  647,  652,  650,  657,  656,  651,  648,  659,
      651,  654,  653,  649,  651,  652,  655,    0,  650,  653,
      656,  655,  652,  653,  654,  657,  656,    0,  655,  659,
      652,  654,  657,  656,  651,  753,  659,  658,  654,  653,
      658,  756,  652,  655,  665,  661,  665,  656,  655,    0,
      660,  654,  657,  656,  662,  663,  659,  660,  654,  663,
      658,  661,  753,  664,  658,  661,  665,  658,  756,  662,
      660,  665,  661,  665,  662,  668,  664,  660,    0,  663,

      669,  662,  663,  664,  660,  666,  663,  658,  661,  666,
      664,  667,  661,  665,  670,  668,  662,  660,  667,  758,
      669,  662,  668,  664,  671,  666,  663,  669,  672,  760,
      664,  667,  666,  673,  670,  671,  666,  676,  667,  672,
        0,  670,  668,    0,  671,  667,  758,  669,  672,  673,
      674,  671,  666,  673,  677,  672,  760,  676,  667,  675,
      673,  670,  671,  675,  676,  674,  672,  678,    0,  680,
      674,  671,    0,  679,  677,  672,  673,  674,  682,  680,
      673,  677,  678,  675,  676,    0,  675,  678,  679,  680,
      675,  681,  674,  679,  678,  681,  680,  674,  682,  683,

      679,  677,  761,  685,  684,  682,  680,  685,  687,  678,
      675,  681,  686,  763,  678,  679,  680,  684,  681,  683,
      679,  689,  681,  686,  684,  682,  683,  685,  687,  761,
      685,  684,  686,  688,  685,  687,  690,    0,  681,  686,
      763,  689,  688,    0,  684,  691,  683,  695,  689,  690,
      686,  684,    0,  688,  685,  687,  690,  692,  693,  686,
      688,    0,  697,  690,  691,  691,    0,  695,  689,  688,
      692,  693,  691,  694,  695,  694,  690,  692,  693,  698,
      688,  696,  697,  690,  692,  693,  694,  699,  696,  697,
      700,  691,  691,  694,  695,    0,  701,  692,  693,  698,

      694,  696,  694,  764,  692,  693,  698,  699,  696,  697,
      700,  703,  702,  694,  699,  696,  701,  700,  765,    0,
      694,  705,  704,  701,  706,    0,  698,  702,  696,  704,
      764,  703,  702,    0,  699,  712,  766,  700,  703,  702,
        0,  705,  704,  701,  706,  765,  707,  708,  705,  704,
      708,  706,  709,    0,  702,  712,  704,    0,  703,  702,
      707,  707,  712,  766,  711,  709,  707,  708,  705,  704,
      713,  706,  709,  707,  708,    0,  710,  708,  711,  709,
      710,    0,  712,  713,  711,    0,  767,  707,  707,  714,
      713,  711,  709,  707,  708,  715,  710,  713,  716,  709,

      717,  718,  714,  710,  717,  711,  716,  710,  715,  714,
      713,  711,  719,  767,  721,  715,  714,  713,  716,    0,
      717,  718,  715,  710,  722,  716,  720,  717,  718,  714,
      720,  717,  719,  716,  721,  715,  714,  722,  723,  719,
      725,  721,  715,  724,  722,  716,  723,  717,  718,  726,
      720,  722,  730,  720,  727,  725,  724,  720,  723,  719,
      725,  721,  727,  724,  722,  723,  728,  725,  731,  726,
      724,  722,  730,  723,  727,  728,  726,  720,  729,  730,
      729,  727,  725,  724,  732,  723,  728,  725,  731,  727,
      724,    0,  733,  728,  734,  731,  726,  735,  769,  730,

      729,  727,  728,  739,  732,  729,  736,  729,  738,  737,
      738,  732,  733,  728,  734,  731,    0,  735,  737,  733,
      736,  734,  740,  739,  735,  769,  736,  729,  738,  737,
      739,  732,  742,  736,  741,  738,  737,  738,  740,  733,
      746,  734,  740,  741,  735,  737,  770,  736,  742,  740,
      739,  744,  742,  736,  741,  738,  737,    0,  743,  742,
      746,  741,  743,  748,  749,  740,  744,  746,  750,  740,
      741,  744,  745,  770,  745,  742,  751,  747,  744,  742,
      747,  741,  743,  748,  749,  743,  752,  746,  750,  743,
      748,  749,  745,  744,  771,  750,  751,  747,  744,  745,

      772,  745,  773,  751,  747,  775,  752,  747,  776,  743,
      748,  749,  777,  752,  778,  750,  779,  780,  781,  745,
      782,  771,  783,  751,  747,  787,  788,  772,  789,  773,
      790,  791,  775,  752,  792,  776,  793,  794,  796,  777,
      797,  778,  798,  779,  780,  781,  799,  782,  804,  783,
      806,  807,  787,  788,  809,  789,  811,  790,  791,  813,
      814,  792,  815,  793,  794,  796,  816,  797,  818,  798,
      819,  820,  822,  799,  823,  804,  824,  806,  807,  825,
      826,  809,  827,  811,  828,  829,  813,  814,  830,  815,
      832,  833,  834,  816,  836,  818,  837,  819,  820,  822,

      840,  823,  841,  824,  839,  843,  825,  826,  928,  827,
      844,  828,  829,  839,  842,  830,  845,  832,  833,  834,
      840,  836,  841,  837,  839,  843,  846,  840,  842,  841,
      844,  839,  843,    0,  842,  928,  845,  844,  847,  847,
      839,  842,  848,  845,    0,  929,  846,  840,    0,  841,
      853,  839,  843,  846,  852,  842,  849,  844,  850,  847,
      851,  842,  848,  845,  852,  847,  847,  850,  854,  848,
      853,  849,  929,  846,  852,  851,  849,  853,  850,    0,
      851,  852,    0,  849,  855,  850,  847,  851,  854,  848,
      857,  852,  856,  855,  850,  854,  856,  853,  849,    0,

      857,  852,  851,  849,  855,  850,  858,  851,  859,  860,
      857,  855,    0,  858,  861,  854,  856,  857,  861,  856,
      855,    0,  864,  856,  862,  930,  858,  857,  859,  860,
      865,  855,    0,  858,  861,  859,  860,  857,  863,  862,
      858,  861,  864,  856,  862,  861,    0,  863,  866,  864,
      865,  862,  930,  858,  931,  859,  860,  865,  863,  867,
      867,  861,  868,  866,  870,  863,  862,    0,  866,  864,
      869,  862,  869,  871,  863,  866,  868,  865,  872,    0,
      867,  931,  868,    0,  870,  863,  867,  867,  873,  868,
      866,  870,  869,  871,  874,  866,  874,  869,  872,  869,

      871,    0,  880,  868,  877,  872,  873,  867,  873,  868,
      876,  870,  875,    0,  874,  873,  875,  876,  877,  869,
      871,  874,  880,  874,  877,  872,  878,  879,  878,  880,
      876,  877,  881,  873,    0,  873,  875,  876,    0,  875,
      883,  874,  879,  875,  876,  877,  878,  879,  884,  880,
      882,  877,  881,  878,  879,  878,  886,  876,  887,  881,
      883,  888,  884,  875,  885,  882,  889,  883,  884,  879,
      882,  885,  933,  878,  879,  884,  886,  882,  887,  881,
      890,  888,  891,  886,  885,  887,  889,  883,  888,  884,
      892,  885,  882,  889,  892,  884,  894,  882,  885,  933,

      890,    0,  891,  886,  895,  887,  893,  890,  888,  891,
      896,  885,  935,  889,  892,  893,  894,  892,  897,  895,
      898,  892,    0,  894,  895,    0,  893,  890,  899,  891,
      896,  895,  897,  893,  900,  901,  901,  896,  897,  935,
      898,  892,  893,  894,    0,  897,  895,  898,  899,  900,
      903,  895,  904,  893,  900,  899,  901,  896,  902,  897,
      905,  900,  901,  901,  906,  897,  907,  898,  906,  936,
      903,  902,  904,  909,  909,  899,  900,  903,  902,  904,
      905,  900,    0,  901,  906,  902,  907,  905,  908,  910,
        0,  906,  908,  907,  909,  906,  936,  903,  902,  904,

      909,  909,  911,  911,  910,  902,  912,  905,  915,  910,
        0,  906,  908,  907,  917,  908,  910,  913,  914,  908,
      912,  909,    0,  911,    0,    0,  912,  914,  915,  911,
      911,  910,  913,  912,  917,  915,  910,  913,  914,  908,
      916,  917,  918,  920,  913,  914,  921,  912,  924,  916,
      911,  919,  919,  912,  914,  915,  937,  922,    0,  913,
      916,  917,  918,  920,  913,  914,  921,  916,  924,  918,
      920,  922,  919,  921,  938,  924,  916,  922,  919,  919,
      940,  923,  942,  937,  922,  923,  946,  916,  948,  918,
      920,  949,  950,  921,  951,  924,  956,  958,  922,  919,

      959,  938,  962,  963,  922,  923,  966,  940,  923,  942,
      967,  968,  923,  946,  969,  948,  970,  972,  949,  950,
      973,  951,  978,  956,  958,  979,  980,  959,  981,  962,
      963,  986,  923,  966,  987,    0,  988,  967,  968,  989,
      991,  969,  990,  970,  972,  992,    0,  973,  994,  978,
      993,  990,  979,  980,  987,  981,  988,    0,  986,  989,
      991,  987,  990,  988,  993,  992,  989,  991,  994,  990,
      993,    0,  992,  995,  996,  994,  998,  993,  990,    0,
      995,  987, 1001,  988,  997, 1003,  989,  991, 1055,  990,
      998,  993,  992,  995,  996,  994,  998,  993, 1000,  997,

      995,  996, 1001,  998,  997, 1003,  999,  995,  999, 1001,
     1005,  997, 1003, 1000, 1006, 1055, 1002,  998, 1000, 1002,
      995,  996, 1004,  998, 1004, 1000,  997, 1007,  999, 1001,
     1005,  997, 1003,  999, 1006,  999, 1008, 1005, 1009, 1002,
     1000, 1006,    0, 1002, 1004, 1000, 1002, 1007, 1014, 1004,
     1012, 1004, 1010,    0, 1007,  999, 1008, 1005, 1009, 1012,
     1011, 1006,    0, 1008, 1011, 1009, 1002, 1010, 1014, 1013,
     1012, 1004, 1010, 1015, 1007, 1014,    0, 1012, 1016, 1010,
     1011, 1017, 1056, 1008, 1013, 1009, 1012, 1011,    0, 1013,
     1019, 1011,    0, 1015, 1010, 1014, 1013, 1012, 1016, 1010,

     1015, 1017, 1018, 1018, 1021, 1016, 1020, 1011, 1017, 1056,
     1019, 1013, 1022,    0, 1023, 1024, 1013, 1019, 1058, 1020,
     1015, 1059, 1024, 1018, 1021, 1016, 1020, 1026, 1017, 1018,
     1018, 1021, 1022, 1020, 1023, 1024, 1025, 1019, 1025, 1022,
     1027, 1023, 1024,    0, 1062, 1058, 1020, 1026, 1059, 1024,
     1018, 1021, 1031, 1020, 1026, 1028, 1025,    0, 1033, 1022,
     1027, 1023, 1024, 1025, 1029, 1025, 1035, 1027, 1029, 1030,
     1028, 1062, 1031, 1030, 1026, 1028,    0,    0, 1033, 1031,
     1035, 1032, 1028, 1025, 1029, 1033, 1035, 1027,    0, 1030,
     1032, 1029, 1034, 1035, 1034, 1029, 1030, 1028, 1036, 1031,

     1030, 1032, 1028, 1037, 1038, 1033, 1039, 1035, 1032,    0,
        0, 1029, 1064, 1035, 1034, 1041, 1030, 1032, 1036, 1034,
        0, 1034,    0, 1037, 1038, 1036, 1039, 1042, 1032,    0,
     1037, 1038, 1040, 1039, 1067, 1041, 1040, 1043, 1043, 1064,
     1042, 1034, 1041,    0, 1070, 1036, 1044, 1042, 1045, 1046,
     1037, 1038, 1047, 1039, 1042, 1071, 1040, 1048, 1043, 1040,
     1072, 1067, 1041, 1040, 1043, 1043, 1044, 1042, 1045, 1046,
     1048, 1070, 1047, 1044, 1042, 1045, 1046, 1048, 1074, 1047,
     1075, 1077, 1071, 1040, 1048, 1043, 1078, 1072, 1080, 1082,
     1083, 1084, 1085, 1044, 1086, 1045, 1046, 1048,    0, 1047,

     1087,    0, 1088, 1090, 1048, 1074, 1091, 1075, 1077, 1082,
     1083, 1084, 1085, 1078, 1086, 1080, 1082, 1083, 1084, 1085,
     1087, 1086, 1088, 1090, 1089, 1092, 1091, 1087, 1089, 1088,
     1090,    0,    0, 1091, 1093,    0, 1082, 1083, 1084, 1085,
     1092, 1086, 1094, 1096, 1097, 1092, 1098, 1087, 1089, 1088,
     1090, 1089, 1092, 1091, 1093, 1089, 1095, 1099, 1100, 1101,
     1100, 1093, 1094, 1096, 1097, 1095, 1098, 1092, 1102, 1094,
     1096, 1097, 1092, 1098, 1103, 1089, 1095, 1099,    0, 1101,
     1100, 1093, 1106, 1095, 1099, 1100, 1101, 1100, 1102, 1094,
     1096, 1097, 1095, 1098, 1103, 1102, 1105, 1107, 1104, 1107,

     1109, 1103, 1106, 1095, 1099, 1105, 1101, 1100, 1104, 1106,
        0, 1112, 1116, 1108, 1110, 1102, 1105, 1113, 1104, 1107,
     1109, 1103, 1110, 1105, 1107, 1104, 1107, 1109, 1108, 1106,
     1111, 1112, 1105, 1108, 1110, 1104, 1114, 1113, 1112, 1116,
     1108, 1110, 1119, 1105, 1113, 1104, 1107, 1109, 1111, 1110,
     1111, 1120, 1121, 1122, 1123, 1108, 1114, 1111, 1112, 1124,
     1108, 1110, 1125, 1114, 1113, 1127, 1129, 1130, 1132, 1119,
     1131, 1133,    0,    0,    0, 1111, 1145, 1111, 1120, 1121,
     1122, 1123, 1134, 1114, 1134, 1131, 1124, 1130, 1132, 1125,
     1131, 1133, 1127, 1129, 1130, 1132,    0, 1131, 1133, 1135,

     1135, 1136, 1134, 1145, 1138, 1139,    0, 1139, 1149, 1134,
     1137, 1134, 1131, 1138, 1130, 1132, 1136, 1131, 1133, 1140,
     1135, 1136, 1141, 1137, 1138, 1139, 1135, 1135, 1136, 1134,
     1137, 1138, 1139, 1142, 1139, 1149, 1143, 1137, 1152, 1140,
     1138, 1154, 1141, 1136, 1142, 1170, 1140, 1135, 1136, 1141,
     1137, 1138, 1139, 1142, 1144, 1144, 1143, 1137, 1143, 1156,
     1142, 1175, 1177, 1143, 1157, 1152, 1140, 1158, 1154, 1141,
     1159, 1142, 1170, 1161,    0, 1144, 1162,    0, 1160, 1156,
     1142, 1144, 1144, 1143, 1157,    0, 1156, 1158, 1175, 1177,
     1159, 1157, 1160, 1161, 1158, 1163, 1162, 1159, 1160,    0,

     1161, 1164, 1144, 1162, 1165, 1160, 1156, 1166, 1179, 1163,
     1165, 1157, 1171, 1172, 1158, 1163,    0, 1159, 1173, 1160,
     1161, 1164, 1163, 1162, 1165, 1160, 1174, 1166, 1164, 1176,
        0, 1165, 1171, 1172, 1166, 1179, 1163, 1165, 1173, 1171,
     1172, 1181, 1163, 1178,    0, 1173, 1174, 1180, 1164, 1176,
     1183, 1165,    0, 1174, 1166, 1186, 1176, 1180, 1182, 1171,
     1172, 1178,    0, 1178,    0, 1173,    0, 1180, 1181,    0,
     1178, 1182,    0, 1174, 1180, 1186, 1176, 1183, 1182, 1184,
     1184,    0, 1186,    0, 1180, 1182,    0,    0, 1178,    0,
     1178,    0,    0,    0, 1180,    0,    0,    0, 1182,    0,

     1184,    0, 1186,    0,    0, 1182, 1184, 1184,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1184, 1188, 1188,
     1188, 1188, 1188, 1189,    0,    0, 1189, 1189, 1191, 1191,
     1191,    0, 1191, 1192,    0, 1192, 1192, 1192, 1193,    0,
     1193, 1193, 1193, 1194,    0, 1194, 1194, 1194, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"


#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;
char* substr(const char* source, int from, int to);
#line 2132 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2146 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2433 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1188 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1187 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "flex_lexer.l"

	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
/* FOR Queryhouse */
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(FOREIGN)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(REFERENCES)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ACTION)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(JSON)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(INDEXED)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(GENERATED)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ALWAYS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(TRIGGER)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(EACH)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(ROW)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(CURRENT)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(EXCLUDE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(OTHERS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(TIES)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(NOTHING)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(NULLS)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(LAST)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(FIRST)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(DO)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(COLLATE)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{
	yylval->ival = 1;
	return SQL_INTVAL;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{
	yylval->ival = 0;
	return SQL_INTVAL;
}
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 158:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 165:
#line 246 "flex_lexer.l"
case 166:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 267 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 269 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 270 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 271 "flex_lexer.l"
{  /*fprintf(stdout, "[SQL-Lexer-Error] Unterminated string\n"); */ return 0; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 273 "flex_lexer.l"
{ /*fprintf(stdout, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); */ return 0; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 276 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3386 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1188 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1188 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1187);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 276 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

char* substr(const char* source, int from, int to) {
    int len = to - from;
    char* copy = (char*)malloc(len + 1);
    ;
    strncpy(copy, source + from, len);
    copy[len] = '\0';
    return copy;
}

int yyerror(const char *msg) {
    fprintf(stdout, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
