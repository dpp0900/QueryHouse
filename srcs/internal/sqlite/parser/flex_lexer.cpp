#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 171
#define YY_END_OF_BUFFER 172
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1148] =
    {   0,
        0,    0,  168,  168,    2,    2,  172,  170,    5,    5,
      170,  170,  160,  166,  160,  160,  163,  160,  160,  160,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  160,  168,  169,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    5,  155,    0,    1,  163,
      162,  161,  157,  156,  154,  158,  165,  165,  165,  165,

      165,  165,  108,  165,  109,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  150,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  110,  165,  111,  112,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  135,  165,  113,  114,
      115,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  116,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  159,
      168,  167,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  164,  161,
       94,  165,   95,  165,  165,   96,  165,   97,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

       98,  165,  165,  120,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,   99,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  100,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  101,  165,  165,
      102,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  103,  165,  104,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  130,  165,  165,  165,
      105,  165,  165,  165,  106,  165,  165,  165,  165,  165,
      107,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      165,  165,  165,  165,  165,  165,  165,   68,  165,   69,
      144,   70,  165,  165,  165,  165,  165,  165,  165,  165,
      165,   71,  165,  165,  165,  165,   72,  165,  165,  165,
       73,  129,   74,  165,  165,  165,  165,  165,  165,   75,
      165,  165,  165,   76,   77,  165,  165,  165,   78,  165,
      119,  165,  165,  165,  165,  165,   79,  165,   80,  148,
       81,   82,  165,   83,  165,   84,  165,  165,  165,  165,
      165,   85,  165,  165,  165,  165,  165,  165,   86,  165,
      165,  165,  165,  165,  165,  139,  165,  165,  165,   87,

      165,  165,   88,   89,  140,   90,  165,  165,  152,  165,
      165,  165,  165,  165,  165,  165,  165,   91,   92,  165,
       93,  122,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   48,   49,  165,   50,  165,  127,
      165,  165,  126,  165,  165,  165,  165,  165,   51,  165,
      165,  165,  165,  165,   52,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  153,  149,   53,  165,  165,  165,
       54,  165,  165,   55,   56,  165,  165,  165,  165,   57,
       58,   59,   60,  165,  121,  165,  165,  147,  165,   61,
      165,   62,  165,  165,  165,  165,  138,  165,  165,   63,

      165,  165,  165,  165,   64,  165,  165,  165,  165,   65,
      165,  165,  165,   66,  165,  165,   67,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      125,   23,  165,  165,  165,   24,  145,  165,   25,  165,
      165,  165,  165,   26,  165,   27,  165,   28,   29,   30,
      165,   31,  165,  165,  165,   33,  134,   34,   35,  165,
       36,  165,  165,   37,  118,  165,  165,   38,  136,  165,
      165,  165,  165,   39,  165,   40,  117,   41,   42,   43,
      165,  165,  165,  165,   44,   45,   46,   47,  165,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   13,   14,
      151,   15,   16,  131,  165,  165,   17,  165,  165,  132,
       32,  165,  165,  123,   18,  165,   19,  146,  165,  165,
      165,   20,  165,   21,  165,  165,  128,  165,   22,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      143,  165,   10,   11,  165,  165,  165,  165,  165,  165,
       12,  165,  165,  165,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,  165,  133,
      124,    8,  165,  142,  137,    9,  165,  141,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    6,    7,
      165,    2,    2,    2,  165,    2,  165,    2,  165,    2,
      165,    2,  165,    2,    4,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   39,    6,   66,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1155] =
    {   0,
        0,    0,  408,  407,   66,    0,  413, 4570,  131,  133,
      397,    0, 4570, 4570,  129,  398,  131,  130,  395,  393,
      127,  127,  179,  227,  272,  323,  130,  135,  170,  119,
      132,  173,  176,  198,  366,  205,    0,  234,  226,  414,
      124,  229,  239,  139,  304,    0,  361,    0,  164,  166,
      354,  353,    0,    0,  152,  342,  196,  196,  326,  315,
      472,  538,  591,  643,  695,  747,  276,  277,  795,  274,
      255,  847,  322,  899,  947,  999,  278, 1051, 1101, 1153,
     1201,  341,  373,  331,  244,  262, 4570,  275, 4570,  257,
      225,  223, 4570, 4570, 4570, 4570,    0,  233,  251,  398,

      273,  267,  287,  397,    0,  321,  347,  414,  447,  271,
      277,  449,  476,  462,  313,  328,  346,  366,  393,  403,
      532,  408,  475,  443,  527,  458,  463,  469,  477,  479,
      525,  476,    0,  507,  574,  514,  531,  517,  527,  542,
      543,  583,  531,  539,  544,  540,  557,  583,  592,    0,
      596,  593,  582,  585,  606,  609,  594,  628,  625,  615,
      632,  643,  634,  632,  649,  641,  630,  651,  657,  675,
      651,  692,  653,  657,  690,  693,  698,  685,  705, 4570,
        0, 4570,    0,  399,    0,  212,    0,  394,  205,  193,
        0,    0,    0,    0,  712,  735,  738, 1249,  746,  779,

      791, 1297,  717,  807,  805, 1345,  829,  833,  797,  871,
     1397,  883,  845,  907,  881,  873,  905,  939, 1447,  855,
      938,  961,  984,  993, 1007,  996, 1015, 1038, 1036, 1070,
      953, 1049, 1496, 1100, 1112,  982, 1140, 1114, 1162, 1548,
     1124, 1196, 1198, 1199, 1235, 1145, 1253, 1017, 1204, 1258,
     1259, 1289, 1308, 1213, 1310, 1342, 1293, 1314, 1347, 1598,
     1348, 1386, 1376, 1401, 1410, 1343, 1407, 1453, 1461, 1649,
     1498, 1509, 1507, 1416, 1419, 1535, 1479,    0, 4570,  189,
        0,  706,    0,  721,  753,    0,  754,    0,  746,  767,
      757,  779, 1551,  795,  860,  934,  855,  901,  953,  987,

        0, 1032, 1095,    0, 1050, 1070, 1552, 1069, 1079, 1066,
     1095, 1091, 1100, 1158,    0, 1179, 1553, 1197, 1207, 1222,
     1257, 1251, 1315, 1326,    0, 1356, 1375, 1387, 1408, 1406,
     1438, 1451, 1445, 1450, 1476, 1490, 1501, 1564, 1496, 1506,
        0, 1516, 1544, 1561, 1559, 1566, 1574, 1570, 1579, 1567,
     1570, 1573, 1597, 1595, 1589, 1604, 1606, 1607, 1613, 1602,
     1616, 1607, 1615, 1624, 1606, 1621, 1621, 1637, 1629, 1643,
        0, 1632, 1637, 1647,    0, 1642, 1649, 1645, 1660, 1661,
        0, 1661, 1665, 1657, 1662, 1658, 1675, 1666, 1662, 1684,
     1671, 1684, 1688, 1687,    0,  160, 1703, 1706, 1708, 1711,

     1714, 1712, 1725, 1722, 1736, 1740, 1757, 1774, 1770, 1766,
     1778, 1800, 1791, 1809, 1819, 1830, 1828, 1832, 1841, 1833,
     1858, 1867, 1854, 1884, 1873, 1883, 1902, 1886, 1912, 1907,
     1908, 1921, 1916, 1937, 1940, 1938, 1946, 1956, 1975, 1962,
     1961, 1986, 1992, 1990, 2004, 1991, 2020, 2025, 2035, 2043,
     2041, 2044, 2046, 2049, 2058, 2083, 2057, 2079, 2087, 2089,
     2108, 2098, 2117, 2131, 2141, 2095, 2132, 2146, 2172, 2149,
     2157, 2167, 2180, 2181, 2190, 2203, 2211, 2221, 2195, 2220,
     2234, 2252, 2246, 2206, 2264, 2251, 2263, 2277, 2265, 2289,
     2286, 2288, 2305, 2317, 2300, 2318, 2319, 2340, 2328, 2343,

     2361, 2362, 2383, 2377, 2385, 2394, 2402, 2418, 2423, 2435,
     1749, 1752, 1776, 1802, 1822, 1882, 1945,    0, 1951,    0,
        0,    0, 1994, 2009, 2007, 2050, 2087, 2108, 2177, 2235,
     2278,    0, 2287, 2313, 2334, 2355, 2344, 2370, 2403, 2408,
        0,    0,    0, 2406, 2414, 2417, 2421, 2441, 2439,    0,
     2425, 2431, 2441,    0,    0, 2443, 2461, 2448,    0, 2452,
        0, 2455, 2450, 2458, 2459, 2472,    0, 2469,    0,    0,
        0,    0, 2462,    0, 2472,    0, 2480, 2475, 2478, 2474,
     2487, 2478, 2493, 2481, 2484, 2487, 2494, 2501,    0, 2509,
     2514, 2511, 2505, 2502, 2507,    0, 2515, 2516, 2528,    0,

     2528, 2530,    0,    0,    0, 2517, 2524, 2532,    0, 2519,
     2530, 2525, 2547, 2529, 2543, 2546, 2544,    0,    0, 2548,
        0,    0, 2556, 2564, 2559, 2565, 2567, 2581, 2578, 2582,
     2593, 2595, 2599, 2610, 2618, 2627, 2633, 2632, 2635, 2649,
     2658, 2661, 2670, 2666, 2695, 2684, 2683, 2716, 2701, 2720,
     2733, 2749, 2724, 2732, 2734, 2735, 2757, 2758, 2772, 2770,
     2786, 2788, 2803, 2807, 2811, 2789, 2812, 2824, 2846, 2841,
     2820, 2856, 2843, 2862, 2877, 2874, 2878, 2906, 2880, 2910,
     2895, 2911, 2912, 2916, 2934, 2920, 2945, 2928, 2950, 2968,
     2966, 2951, 2980, 2985, 2974, 3003, 3004, 3020, 3014, 3025,

     3008, 3019, 3042, 3037, 3063, 3068, 3058, 3059, 3074, 3087,
     3077, 3091, 3092, 3093, 3116, 3117, 3122, 3127, 3126, 3128,
     3125, 3150, 3151, 3165, 3180, 3179, 3182, 3190, 3213, 3195,
     3204, 3205, 3214, 3218,    0,    0, 2630,    0, 2692,    0,
     2723, 2739,    0, 2760, 2789, 2811, 2818, 2857,    0, 2863,
     2890, 2919, 2953, 2962,    0, 3049, 3061, 3120, 3131, 3132,
     3146, 3197, 3187, 3221,    0,    0,    0, 3202, 3234, 3228,
     3222, 3237, 3229, 3248,    0, 3234, 3250, 3239, 3247,    0,
        0,    0,    0, 3255,    0, 3260, 3249,    0, 3244,    0,
     3250,    0, 3267, 3253, 3270, 3257,    0, 3272, 3269,    0,

     3278, 3279, 3264, 3285, 3273, 3273, 3280, 3290, 3283,    0,
     3293, 3299, 3302,    0, 3289, 3308,    0, 3307, 3308, 3312,
     3313, 3318, 3321, 3322, 3324, 3336, 3337, 3358, 3346, 3362,
     3370, 3375, 3387, 3381, 3400, 3391, 3386, 3392, 3426, 3416,
     3415, 3421, 3429, 3440, 3445, 3450, 3454, 3466, 3469, 3475,
     3480, 3488, 3483, 3485, 3504, 3494, 3518, 3519, 3528, 3520,
     3542, 3537, 3534, 3552, 3553, 3558, 3568, 3574, 3586, 3587,
     3577, 3602, 3591, 3612, 3608, 3610, 3616, 3620, 3641, 3625,
     3642, 3656, 3650, 3675, 3665, 3679, 3705, 3666, 3696, 3700,
     3690, 3715, 3714, 3719, 3729, 3730, 3733, 3744, 3763, 3745,

        0,    0, 3338, 3376, 3432, 3509,    0, 3542,    0, 3548,
     3637, 3676, 3725,    0, 3751,    0, 3756,    0,    0,    0,
     3768,    0, 3754, 3766, 3758,    0,    0,    0,    0, 3775,
        0, 3765, 3779,    0,    0, 3775, 3782,    0,    0, 3772,
     3784, 3785, 3773,    0, 3796, 3784,    0,    0,    0,    0,
     3803, 3802, 3790, 3805,    0,    0,    0,    0, 3794, 3808,
     3812, 3813, 3817, 3818, 3827, 3823, 3846, 3836, 3842, 3858,
     3877, 3861, 3867, 3895, 3871, 3909, 3886, 3890, 3896, 3900,
     3901, 3911, 3935, 3925, 3930, 3941, 3944, 3949, 3960, 3954,
     3965, 3963, 3973, 3975, 3997, 4006, 3989, 3994, 3998, 4019,

     4028, 4027, 4029, 4060, 4037, 4042, 4043, 4052, 4061, 4071,
     4073, 4082, 4097, 4083, 4086, 4092, 4101, 4114,    0,    0,
        0,    0,    0,    0, 3824, 3856,    0, 3984, 3988,    0,
        0, 4029, 4077,    0,    0, 4107,    0,    0, 4111, 4105,
     4107,    0, 4110,    0, 4118, 4113,    0, 4135,    0, 4136,
     4137, 4140, 4145, 4146, 4149, 4150, 4151, 4155, 4159, 4180,
     4181, 4185, 4190, 4189, 4191, 4194, 4215, 4203, 4204, 4219,
     4233, 4225, 4229, 4244, 4247, 4255, 4265, 4257, 4268, 4269,
        0, 4239,    0,    0, 4271, 4279, 4264, 4274, 4284, 4295,
        0, 4287,  124, 4300, 4301, 4303, 4307, 4309, 4311, 4333,

     4322, 4352, 4335, 4341, 4319, 4363, 4367, 4376, 4351,    0,
        0,    0, 4343,    0,    0,    0, 4367,    0, 4377, 4385,
     4386, 4391, 4395, 4407, 4408, 4417, 4419, 4420,    0,    0,
     4416, 4421, 4429, 4430, 4406, 4431, 4427, 4461, 4449, 4460,
     4449, 4471, 4464, 4474,    0, 4465, 4570, 4539, 4544,  133,
     4549, 4554, 4559, 4564
    } ;

static const flex_int16_t yy_def[1155] =
    {   0,
     1147,    1, 1148, 1148, 1147,    5, 1147, 1147, 1147, 1147,
     1147, 1149, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1147, 1151, 1147, 1152, 1152, 1147,
     1152, 1153, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1154, 1154,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1152, 1147, 1147, 1149, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1150, 1150, 1150, 1150,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1147,
     1151, 1147, 1152, 1152, 1152, 1153, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62, 1152, 1147, 1147,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1152, 1152,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1150, 1150,
     1150,   62,   62,   62, 1150,   62, 1150,   62, 1150,   62,
     1150,   62, 1150,   62, 1150,   62,    0, 1147, 1147, 1147,
     1147, 1147, 1147, 1147
    } ;

static const flex_int16_t yy_nxt[4637] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   77,   84,   77,   48,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   77,
       84,   85,   86,   86,   86,   86,   89,   97,   90,   92,
       90,   93,   94,   98,  104,   99,  137,  128,  131,  138,
      172,  100,  173,  101,  129,  174,  179,  102,  103,  187,
      130,  188,  132, 1117,  105,  184,   86,   86,   86,  396,
       98,  104,   99,  137,  128,  131,  138,  172,  100,  173,
      101,  129,  174,  179,  102,  103,  139,  130,  133,  132,
      140,  105,  106,  143,  141,  134,  135,  144,  280,  107,

      142,  136,  396,  145,  190,  188,  108,  191,  192,  109,
      110,  146,  111,  139,  189,  133,  395,  140,  154,  106,
      143,  141,  134,  135,  144,  147,  107,  142,  136,  155,
      145,  148,  280,  108,   91,  156,  109,  110,  146,  111,
      112,  161,  175,  162,  113,  154,  163,  157,  114,  281,
      176,  158,  147,  164,  115,  159,  155,  116,  148,  177,
      178,  160,  156,   86,   86,   92,   90,  112,  161,  175,
      162,  113,  236,  163,  157,  114,  281,  176,  158,  279,
      164,  115,  159,  282,  116,  117,  177,  178,  160,  286,
      229,  195,  195,  226,  195,  195,  118,  287,  119,  236,

      227,  235,  288,  120,  230,  301,  228,  302,  121,  278,
      282,  195,  117,  195,  195,  195,  286,  229,  195,  195,
      226,  195,  195,  118,  287,  119,  194,  227,  235,  288,
      120,  230,  301,  228,  302,  121,  122,  193,  195,  241,
      195,  195,  195,  242,  123,  292,  311,  124,  277,  243,
      125,  189,  293,  126,  273,  312,  127,  183,  195,  195,
      294,  313,  274,  122,  295,  185,  241,  182,  195,  180,
      242,  123,  292,  311,  124,  277,  243,  125,  195,  293,
      126,  273,  312,  127,  149,  195,  195,  294,  313,  274,
      195,  295,  150,  275,  276,  195,  151,  314,  152,  153,

      184,   86,  190,  188,   96,  195,   95,   91,   87,  315,
      195,  149, 1147,   47,   47,  289,  290,  195,  316,  150,
      275,  276,  283,  151,  314,  152,  153,  165,  166,  291,
      284,  167,  320,  285,  168,  169,  315,  195,  296,  297,
      298,  170,  289,  290,  171,  316, 1147, 1147, 1147,  283,
     1147, 1147, 1147, 1147,  165,  166,  291,  284,  167,  320,
      285,  168,  169, 1147,  299,  296,  297,  298,  170, 1147,
      323,  171,  183,  183,  300,  183,  183,  183,  183,  183,
      183,  303,  183,  183,  183,  326,  304,  327,  196,  305,
      197,  299,  309,  310,  306,  328,  198,  323,  199,  321,

      307,  300,  200,  201,  329,  322,  330,  308,  303,  333,
     1147, 1147,  326,  304,  327,  196,  305,  197, 1147,  309,
      310,  306,  328,  198, 1147,  199,  321,  307, 1147,  200,
      201,  329,  322,  330,  308,  334,  333,  183,  183,  183,
      339,  183,  183,  183,  183,  183,  183,  317,  183,  183,
      183,  324,  340,  318,  341,  202,  331,  325,  342,  332,
      343,  349,  334, 1147,  319,  350,  344,  339,  345, 1147,
      351, 1147,  352, 1147,  317,  203, 1147, 1147,  324,  340,
      318,  341,  202,  331,  325,  342,  332,  343,  349,  353,
      335,  319,  350,  344, 1147,  345,  346,  351,  347,  352,

      336, 1147,  203,  183,  204,  337,  338,  354,  195,  348,
      355,  205,  356,  357,  358,  359,  353,  335,  206,  360,
      363,  207,  208,  346,  209,  347,  361,  336,  195, 1147,
      362,  204,  337,  338,  354,  195,  348,  355,  205,  356,
      357,  358,  359, 1147,  366,  206,  360,  363,  207,  208,
      367,  209,  368,  361,  364,  195,  210,  362,  369,  365,
      211,  372,  373,  374,  212,  375,  376,  370,  377,  387,
      213,  366,  382,  214,  378,  371, 1147,  367,  388,  368,
      195,  364,  379,  210,  383,  369,  365,  211,  372,  373,
      374,  212,  375,  376,  370,  377,  387,  213,  380,  382,

      214,  378,  371,  381, 1147,  388,  384,  195,  215,  379,
      391,  383,  195,  385,  389,  392,  386,  393,  394,  216,
      390,  217, 1147,  511, 1147,  380,  218, 1147, 1147,  195,
      381,  219,  195,  384,  195,  215, 1147,  391,  512,  195,
      385,  389,  392,  386,  393,  394,  216,  390,  217,  195,
      511,  397,  195,  218,  195,  195,  195, 1147,  219,  195,
      220,  195,  402,  195,  195,  512,  513,  514,  221, 1147,
      398,  222,  195,  515,  223,  195,  195,  224,  397,  195,
      225,  195,  195,  195,  195, 1147, 1147,  220,  516,  402,
      195,  195,  517,  513,  514,  221,  195,  398,  222,  195,

      515,  223,  195,  518,  224, 1147,  404,  225,  195,  403,
      195,  195,  195,  231,  195,  516,  195, 1147,  410,  517,
      232,  233,  411,  195,  195,  522,  234,  418,  195, 1147,
      518,  408,  195,  404,  195,  195,  403, 1147,  409,  195,
      231,  195,  195,  195,  195,  410,  415,  232,  233,  411,
      195,  195,  522,  234,  418,  195,  416, 1147,  408,  195,
      237,  195,  195, 1147,  238,  409,  195,  417,  239,  195,
      195,  195,  195,  415,  240,  523, 1147,  195,  427,  436,
      526, 1147,  195,  416,  195, 1147, 1147,  237,  195,  195,
      195,  238,  195,  195,  417,  239,  429,  195,  195,  195,

      195,  240,  523,  419,  430,  427,  436,  526,  420,  195,
      195,  195,  244,  425,  426,  195,  195,  195,  195,  195,
      195,  431,  195,  429,  195,  195,  245,  195, 1147, 1147,
      419,  430,  246,  527,  428,  420,  195,  195, 1147,  244,
      425,  426,  195,  195,  195,  195, 1147,  195,  431,  195,
     1147,  195, 1147,  245,  432,  195,  195, 1147,  524,  246,
      527,  428,  437,  195,  195,  247,  528,  525,  438,  195,
      195,  195, 1147,  248, 1147,  195,  195,  249,  195,  250,
      251,  432,  195,  195,  195,  524, 1147, 1147,  439,  437,
      195,  195,  247,  528,  525,  438, 1147,  195,  195,  195,

      248,  195,  195,  195,  249,  195,  250,  251,  440, 1147,
      195,  195,  252,  195,  441,  439,  195,  195,  529,  457,
      442,  195,  444,  253,  195,  195,  195, 1147,  195,  254,
      195,  443,  195,  195,  195,  440,  195,  195, 1147,  252,
      195,  441,  445,  195,  195,  529,  457,  442,  195,  444,
      253,  195,  195,  195,  195,  195,  254,  195,  443,  195,
      195,  195,  530,  195,  255,  446,  195,  447,  256,  445,
      448,  195,  257,  195,  533,  195, 1147,  450,  258,  195,
      195,  195,  195,  534,  537, 1147,  195,  195,  195,  530,
     1147,  255,  446,  195,  447,  256,  538,  448,  539,  257,

      195,  533,  195,  449,  450,  258, 1147,  195,  531,  540,
      534,  537,  532,  195,  195,  195,  259,  195,  260,  541,
      542,  261, 1147,  538, 1147,  539,  455, 1147,  262,  195,
      449,  195,  459,  456,  195,  531,  540,  195,  195,  532,
     1147,  195, 1147,  259,  195,  260,  541,  542,  261,  195,
     1147,  195, 1147,  455,  465,  262,  195,  195,  195,  459,
      456,  195,  195, 1147,  195,  195,  263,  264,  195,  470,
      265,  458, 1147,  266,  267,  543,  195,  195,  195,  195,
      268,  465,  195,  269,  195,  460, 1147,  461,  195,  195,
      195, 1147,  544,  263,  264, 1147,  470,  265,  458,  195,

      266,  267,  543, 1147,  195, 1147,  195,  268, 1147,  195,
      269, 1147,  460,  195,  461,  195,  195,  195,  195,  544,
      472,  195,  466, 1147,  467, 1147,  195,  270,  547,  271,
      477,  468,  272,  195,  478,  195,  195,  548,  195, 1147,
      195,  195,  195,  195, 1147,  195, 1147,  472,  195,  466,
      195,  467,  195,  549,  270,  547,  271,  477,  468,  272,
      195,  478,  195,  195,  548,  195,  195,  469,  195, 1147,
      195,  471,  195,  399,  550,  195,  195,  195,  473,  195,
      549,  400,  551, 1147,  401, 1147,  195, 1147, 1147, 1147,
      195,  474, 1147,  195,  469,  195,  195,  195,  471,  195,

      399,  550,  195,  195, 1147,  473,  195, 1147,  400,  551,
      195,  401,  482,  195,  195,  405,  406,  195,  474,  475,
     1147,  476,  195,  195, 1147,  195,  195,  195,  552,  407,
      195,  195, 1147,  195,  195, 1147,  479,  195, 1147,  482,
     1147,  195,  405,  406, 1147,  195,  475,  195,  476,  483,
      553,  195,  195,  195,  195,  552,  407,  195,  195,  195,
      493,  195,  195,  479,  195,  195, 1147,  484,  480,  412,
      413,  414,  195,  481,  195,  488,  483,  553,  195,  195,
      195,  554,  195, 1147,  195,  195,  195,  493, 1147,  195,
      490,  195,  195,  195,  484,  480,  412,  413,  414,  555,

      481, 1147,  488,  195,  556, 1147,  195,  195,  554,  195,
      421,  195,  195,  195,  195,  422,  489,  490,  195, 1147,
      195,  423,  557,  195,  494,  491,  555,  195,  424, 1147,
      195,  556,  495,  507,  195, 1147,  508,  421,  195,  558,
      195,  195,  422,  489,  195,  195,  492,  195,  423,  557,
      195,  494,  491,  195,  195,  424,  195, 1147,  559,  495,
      507,  195,  433,  508,  195,  195,  558, 1147,  434, 1147,
      195,  195,  560,  492,  195,  561,  496,  562,  195,  435,
      195,  497,  498,  195,  195,  559, 1147, 1147, 1147,  433,
      195,  195,  510,  563,  499,  434,  195,  195,  195,  560,

     1147, 1147,  561,  496,  562,  195,  435,  564,  497,  498,
     1147,  195,  451,  195,  503,  195,  195,  195,  565,  510,
      563,  499,  452,  195,  195,  195,  195,  453,  454,  568,
      504,  505,  569,  195,  564,  195, 1147,  506, 1147,  451,
      195,  503,  195,  195,  195,  565,  195, 1147,  570,  452,
     1147,  195,  195,  195,  453,  454,  568,  504,  505,  569,
      195,  462,  195,  463,  506,  195,  519,  509,  520,  535,
      545,  195,  195,  195,  464,  570,  571,  546,  572,  195,
      573,  566,  574,  521,  536,  195, 1147,  575,  462,  576,
      463,  567,  195,  519,  509,  520,  535,  545,  577,  195,

      578,  464,  579,  571,  546,  572,  580,  573,  566,  574,
      521,  536,  195,  485,  575,  195,  576,  581,  567,  582,
      583,  584,  486,  585,  586,  577,  587,  578,  589,  579,
      487,  590,  591,  580,  592,  195, 1147,  593,  594, 1147,
      485,  595,  195, 1147,  581,  588,  582,  583,  584,  486,
      585,  586,  596,  587,  597,  589,  598,  487,  590,  591,
      599,  592,  195,  500,  593,  594,  195,  600,  595,  601,
      501,  602,  588,  502,  603,  604,  605,  606,  607,  596,
      608,  597,  609,  598,  610,  613,  195,  599,  614,  611,
      500,  612,  615,  195,  600,  616,  601,  501,  602,  617,

      502,  603,  604,  605,  606,  607,  618,  608,  621,  609,
      619,  610,  613,  195,  620,  614,  611,  622,  612,  615,
      195, 1147,  616,  623, 1147,  195,  617,  625,  624,  195,
     1147,  195, 1147,  618, 1147,  621, 1147,  619,  626,  195,
      195,  620,  195,  195,  622,  195, 1147,  195,  195,  195,
      623,  195,  195,  195,  625,  624,  195,  195,  195,  195,
     1147,  628,  195,  627, 1147,  626,  195,  195, 1147,  195,
      195, 1147,  195,  195,  195,  195,  195,  195,  195,  735,
      195, 1147,  736,  195,  195,  631,  195,  632,  628,  195,
      627,  195,  629,  635,  195,  195,  634, 1147,  630, 1147,

      195,  195,  633,  195,  195, 1147,  735,  195,  195,  736,
      195,  195,  631,  737,  632,  195,  638,  195,  195,  629,
      635,  195,  195,  634,  636,  630,  195, 1147,  195,  633,
      195, 1147,  640,  637,  195,  195,  195,  195,  195,  738,
      737,  639,  195,  638,  195,  195,  195,  195, 1147,  195,
      195,  636,  739,  195,  643,  195,  195, 1147,  644,  640,
      637,  641,  642,  195,  195,  195,  738,  195,  639,  195,
      195,  647,  195,  195,  195,  195,  195,  195,  195,  739,
      646,  643,  645,  195,  195,  644,  648, 1147,  641,  642,
      650,  195,  195, 1147,  195,  195,  195,  195,  647,  649,

      195,  195,  195,  195,  195,  195, 1147,  646,  740,  645,
      195,  195, 1147,  648,  653,  651,  652,  650,  195,  195,
      195,  195,  195,  195,  655,  195,  649,  195,  195,  195,
      195,  195,  654,  657,  656,  740, 1147,  195,  195,  195,
      658,  653,  651,  652,  195,  195,  195,  195,  195,  195,
      195,  655,  195,  195,  195,  195,  195,  195,  195,  654,
      657,  656,  741,  662,  742,  195,  195,  658,  659,  661,
      660,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  665,  663,  664,  741,
      662,  742,  195,  195, 1147,  659,  661,  660,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  668,  195,  195,
      195,  666,  195,  665,  663,  664,  667,  743,  669,  195,
      195,  195,  744,  195,  670,  195,  195,  195,  195,  195,
      195, 1147,  745, 1147,  668,  195,  195,  195,  666,  195,
      671,  195,  195,  667,  743,  669,  672, 1147,  195,  744,
      195,  670,  195, 1147,  195,  195,  195,  195,  675,  745,
      195,  676,  195,  677,  195,  673,  678,  671,  195,  195,
      674,  746,  195,  672,  195,  195,  679, 1147,  195,  195,
      195,  195, 1147,  195,  195,  675,  195,  195,  676,  195,
      677,  680,  673,  678,  195,  195,  195,  674,  746,  195,

      195,  195,  195,  679,  195,  195,  684,  195,  195,  681,
      195,  682,  195,  195,  686,  195,  195,  747,  680,  683,
      195,  195,  195,  195,  195,  195,  195,  195,  690,  685,
      687,  195,  195,  684,  195,  195,  681, 1147,  682,  195,
      748,  686,  195,  195,  747,  195,  683,  195,  195,  195,
      688,  195,  195,  195,  195,  690,  685,  687,  195,  195,
      689,  195,  195,  195,  691, 1147,  195,  748,  195,  195,
     1147, 1147,  195,  694,  195,  195,  195,  688,  195,  692,
     1147,  195, 1147,  195,  696,  195,  195,  689,  695,  195,
      195,  691,  693,  195,  195,  195,  195,  697,  698, 1147,

      694,  195, 1147,  699,  195,  195,  692,  195,  749,  195,
      195,  696,  195,  195,  704,  695,  195,  195,  195,  693,
      195,  195,  700,  709,  697,  698,  702,  195,  195,  701,
      699,  195,  195,  705,  195,  749,  195,  195,  195,  195,
      195,  704, 1147,  195,  195,  195,  703,  195,  195,  700,
      709,  195,  750,  702,  195,  195,  701,  195,  195,  195,
      705, 1147, 1147,  195,  195,  195,  706,  195,  711,  195,
      195,  195,  707,  703, 1147,  195, 1147,  708,  195,  750,
      195,  195,  195,  195,  195,  195, 1147, 1147,  195,  195,
      195,  710,  751,  706,  195,  711,  195,  713,  195,  707,

      195,  195,  195,  195,  708,  195,  195,  195,  195,  195,
      195,  752,  712,  714,  195,  195,  195,  718,  710,  751,
      715,  195,  195,  195,  713,  195,  195,  195,  195,  195,
      195,  716,  195,  195,  195,  719,  195,  195,  752,  712,
      714,  195,  195, 1147,  718,  721,  753,  715,  717,  195,
      195, 1147,  195,  195,  195,  195,  195,  195,  716,  720,
      195,  195,  719,  195,  195,  195,  754, 1147,  755,  195,
      722, 1147,  721,  753,  756,  717, 1147,  195,  195,  195,
      195,  195,  195,  195,  195,  757,  720,  195,  723,  725,
      724, 1147,  195,  754,  195,  755,  726,  722,  195,  195,

      195,  756,  195,  727,  195,  195,  195,  195, 1147,  729,
     1147,  195,  757, 1147,  195,  723,  725,  724,  728,  195,
      195,  195,  195,  726,  758,  195,  195,  195, 1147,  195,
      727,  195,  759, 1147,  760,  195,  729,  730,  195,  195,
      195,  195,  761,  733,  731,  728,  195,  195,  732,  195,
      762,  758,  195,  763,  764,  195,  765,  766,  195,  759,
      195,  760,  195,  767,  730,  734,  195,  195,  768,  761,
      733,  731,  195,  769,  770,  732,  771,  762,  772,  195,
      763,  764,  195,  765,  766,  773,  774,  195,  775,  776,
      767,  777,  734,  779,  780,  768,  781,  782,  785,  195,

      769,  770,  778,  771,  786,  772,  783,  784,  787,  788,
      789,  790,  773,  774,  791,  775,  776,  792,  777,  793,
      779,  780,  794,  781,  782,  785,  795,  796,  797,  778,
      798,  786,  799,  783,  784,  787,  788,  789,  790,  800,
      801,  791,  802,  803,  792,  804,  793,  805,  806,  794,
      807,  808,  809,  795,  796,  797,  810,  798,  811,  799,
      812,  813,  814,  815,  816,  817,  800,  801, 1147,  802,
      803, 1147,  804,  195,  805,  806,  195,  807,  808,  809,
     1147,  195,  195,  810,  195,  811,  818,  812,  813,  814,
      815,  816,  817,  195,  819,  824,  820,  822,  195,  195,

      195,  195,  821,  195,  195, 1147,  825,  823,  195,  195,
      195,  195,  195,  818, 1147,  195,  195, 1147,  195,  195,
      195,  819,  824,  820,  822,  195,  195,  195,  195,  821,
      195,  195,  195,  825,  823,  195,  195,  195, 1147,  195,
      827,  826,  195,  195,  195,  195,  195,  195, 1147,  195,
      195, 1147,  195,  829,  195,  195, 1147,  195,  828,  195,
     1147,  901,  195,  195,  195,  830,  195,  827,  826,  195,
      195,  195,  195, 1147,  195,  195,  195,  195,  833,  195,
      829,  831,  195,  195,  834,  828,  195,  195,  901,  832,
     1147,  195,  830,  195, 1147,  195,  195,  195,  195,  195,

      195,  195,  195,  195, 1147,  833, 1147,  195,  831,  902,
      195,  834,  195,  195,  195,  837,  832,  836,  195,  835,
      195,  195,  195, 1147, 1147,  195, 1147,  195,  195,  838,
      195,  839,  195,  195,  195,  840,  902,  195,  195,  195,
      903,  195,  837, 1147,  836,  195,  835,  195,  195,  195,
      195,  195,  195,  195,  841,  904,  838,  195,  839,  195,
      195,  195,  840,  843,  195,  195,  195,  903,  195,  195,
      195,  195,  195,  842,  195,  195,  195,  195,  195,  195,
      195,  841,  904,  847,  195,  844,  195,  195,  195,  195,
      843,  845,  905,  195,  195,  195,  195,  195,  195,  195,

      842,  195,  195,  848,  846,  195,  195,  195, 1147,  195,
      847, 1147,  844,  195,  195,  906,  195, 1147,  845,  905,
      195,  195,  195,  195,  195,  195,  195, 1147,  195,  195,
      848,  846,  195,  195,  195,  849,  195,  195,  851,  850,
      195,  195,  906,  907,  195,  908, 1147,  195,  195,  195,
      195,  195,  195,  195,  852,  195,  195,  195,  195,  853,
      195,  195,  849,  195,  195,  851,  850,  195,  195,  854,
      907,  195,  908,  195,  909,  195,  195, 1147,  195,  195,
      195,  852,  855,  195,  195,  195,  853,  195,  195,  910,
      195,  195,  856,  195,  195,  195,  854,  195, 1147,  195,

      195,  909, 1147,  911,  858,  195,  195,  195,  859,  855,
      195,  195,  195,  857,  195,  195,  910,  195,  195,  856,
      195,  195,  195,  195,  195,  860,  195,  195,  195,  195,
      911,  858,  195,  195,  862,  859,  861,  195,  195,  195,
      857,  195,  195,  195,  195,  195,  912,  195,  195,  195,
      195,  195,  860,  195,  195,  195,  195,  195, 1147,  195,
      195,  862,  195,  861,  195,  195,  863,  865,  195,  864,
      195,  195,  195,  912,  195,  195,  195,  913,  195,  914,
      195,  869,  195,  195,  195,  195,  868,  195,  195,  195,
     1147,  872,  195,  863,  865,  195,  864,  195,  195,  866,

      867,  870,  195,  195,  913,  195,  914, 1147,  869,  195,
      195,  195,  195,  868,  195,  195,  871,  195,  872, 1147,
      195,  195,  195, 1147,  195,  195,  866,  867,  870,  195,
      195,  195,  195,  873,  874, 1147,  878,  195,  195,  876,
      195,  195,  195,  871,  195,  195,  877,  195,  195,  195,
      875,  195,  195, 1147,  880,  879,  195,  195,  195,  195,
      873,  874,  195,  878,  195, 1147,  876,  195,  195,  195,
      915, 1147,  195,  877,  195,  195,  195,  875,  195,  195,
      195,  880,  879,  195,  195,  195,  195, 1147,  881,  195,
      883,  195,  886,  916,  195,  195,  195,  915,  882,  884,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  887,
      888,  195,  195,  885,  195,  881, 1147,  883,  195,  886,
      916,  195,  195,  195,  195,  882,  884,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  887,  888,  195,  195,
      885,  195,  195,  195,  195,  195,  917,  891,  918,  919,
     1147,  195,  890,  195,  195,  195,  195,  195,  889,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  917,  891,  918,  919,  893,  920,  890,
      195,  195,  195,  892, 1147,  889,  195,  195,  195,  195,
      195,  195,  195,  895,  195,  195,  195,  195,  894,  195,

     1147,  897,  195, 1147,  893,  920, 1147,  898, 1147,  195,
      892,  896,  195,  921,  195,  195,  195,  195,  922,  195,
      895,  195,  900,  195,  195,  894,  195,  195,  897,  195,
      195,  195,  195,  899,  898,  195,  923,  924,  896,  195,
      921,  195,  195,  195,  195,  922,  195,  925,  195,  900,
      195,  195,  926,  927,  195,  195,  928,  195,  195,  195,
      899,  929,  195,  923,  924,  930,  931,  932,  195,  195,
      933,  934,  935,  936,  925,  937,  938,  195,  195,  926,
      927,  939,  195,  928,  940,  941,  942,  943,  929,  944,
      945,  946,  930,  931,  932,  947,  948,  933,  934,  935,

      936,  949,  937,  938,  950,  951,  952,  953,  939,  954,
      955,  940,  941,  942,  943,  956,  944,  945,  946,  957,
      958,  959,  947,  948,  195,  195, 1147, 1147,  949,  195,
      195,  950,  951,  952,  953,  961,  954,  955,  195,  962,
      963,  195,  956,  960,  195,  195,  957,  958,  959,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
     1147,  195,  961,  195, 1019,  195,  962,  963,  195,  964,
      960,  195,  195,  195,  195,  195,  195,  195,  966,  195,
      195,  195,  195,  195,  965,  195,  195,  968,  195,  967,
      195, 1019,  195, 1020,  970,  195,  964, 1147,  195,  195,

      195,  195,  195,  973,  195,  966,  195,  195,  195,  195,
      195,  965,  195,  969,  968,  972,  967,  195,  195,  195,
     1020,  970,  195,  195,  195,  195,  195,  971,  195,  195,
      973,  195,  195,  195,  195,  195,  195,  195,  977,  195,
      969,  976,  972,  195,  195,  195,  978,  974,  975, 1021,
      195,  195,  195,  195,  971,  195,  195,  195,  195,  195,
      195,  980,  195,  195,  195,  977,  195,  195,  976,  982,
      195,  195,  979,  978,  974,  975, 1021,  195, 1147,  195,
      195,  981,  195,  195,  195,  195,  195,  195,  980,  195,
      195,  195,  195,  195,  195, 1147,  982,  195,  195,  979,

      195,  984,  195,  195,  195,  195,  195,  985,  981,  195,
      195,  195,  195,  195,  195,  983,  986,  195,  195,  195,
      195,  195,  195,  987,  195,  195,  988,  195,  984,  195,
      195,  195,  195,  195,  985,  989,  195,  991,  195,  195,
     1022,  195,  983,  986,  195,  195, 1147,  195,  195,  195,
      987,  195,  195,  988,  195,  195,  195,  195,  195,  195,
      990,  993,  989,  195,  991,  195, 1023, 1022,  195,  195,
      195,  195,  195,  992,  195,  195, 1147, 1147,  195,  195,
     1024,  195,  195,  195,  195,  994,  195,  990,  993,  195,
      195,  195,  195, 1023,  195,  195,  195,  195,  195,  995,

      992,  195,  195,  195,  195,  195,  195, 1024,  195, 1147,
     1147,  195,  994,  996,  195, 1147,  195,  195,  195,  195,
     1147,  195,  195,  195,  195,  195,  995,  999,  195,  195,
      195,  195,  195,  195,  997,  195, 1001,  195,  195,  195,
      996,  195,  195,  998, 1147,  195,  195,  195, 1000,  195,
      195,  195,  195,  195,  999,  195,  195,  195,  195, 1003,
      195,  997,  195, 1001,  195, 1147,  195,  195, 1025,  195,
      998, 1002,  195,  195,  195, 1000,  195, 1004,  195,  195,
      195, 1006,  195,  195,  195,  195, 1003,  195, 1005,  195,
     1147, 1026,  195,  195,  195, 1025,  195, 1009, 1002, 1147,

      195, 1147,  195,  195, 1004,  195,  195, 1012, 1006,  195,
      195, 1007,  195,  195,  195, 1005,  195,  195, 1026,  195,
      195, 1008,  195,  195, 1009, 1147, 1011,  195, 1010,  195,
      195,  195,  195,  195, 1012, 1147, 1014,  195, 1007,  195,
      195, 1013,  195,  195,  195, 1015,  195, 1016, 1008,  195,
      195,  195,  195, 1011,  195, 1010,  195, 1027,  195,  195,
      195,  195,  195, 1014,  195, 1028,  195,  195, 1013,  195,
      195, 1029, 1015,  195, 1016, 1017, 1018,  195,  195,  195,
      195,  195,  195,  195, 1027, 1030, 1031, 1032,  195,  195,
     1033, 1034, 1028,  195,  195, 1035, 1036,  195, 1029, 1037,

      195, 1038, 1017, 1018, 1039, 1040, 1041,  195,  195,  195,
     1042, 1043, 1030, 1031, 1032, 1044, 1045, 1033, 1034, 1046,
     1047, 1048, 1035, 1036, 1049,  195, 1037,  195, 1038,  195,
      195, 1039, 1040, 1041, 1051, 1052, 1147, 1042, 1043, 1050,
      195, 1081, 1044, 1045,  195,  195, 1046, 1047, 1048,  195,
      195, 1049,  195,  195,  195,  195,  195,  195, 1053,  195,
      195, 1051, 1052,  195,  195, 1147, 1050,  195, 1081, 1082,
     1054,  195,  195,  195, 1055,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195, 1053,  195,  195,  195, 1056,
      195,  195, 1057, 1058,  195,  195, 1082, 1054,  195, 1147,

      195, 1055,  195,  195,  195,  195,  195,  195,  195, 1059,
      195,  195,  195,  195,  195,  195, 1056, 1061,  195, 1057,
     1058,  195,  195,  195, 1060,  195,  195,  195,  195, 1147,
      195,  195,  195,  195,  195,  195, 1059,  195,  195,  195,
      195,  195,  195, 1062, 1061,  195,  195,  195,  195, 1147,
      195, 1060,  195,  195,  195,  195, 1063, 1064,  195,  195,
      195,  195,  195, 1147,  195,  195,  195,  195, 1147,  195,
     1062,  195,  195,  195,  195,  195, 1065,  195,  195,  195,
     1067,  195,  195, 1063, 1064,  195,  195, 1147,  195,  195,
      195,  195,  195,  195,  195, 1066, 1147,  195,  195,  195,

      195, 1083,  195, 1065,  195,  195,  195, 1067,  195,  195,
      195,  195,  195,  195,  195,  195, 1147,  195,  195,  195,
     1084, 1068, 1066,  195,  195, 1069,  195,  195, 1083,  195,
     1070,  195, 1147,  195,  195,  195,  195,  195,  195,  195,
     1071,  195,  195,  195,  195,  195,  195, 1084, 1068, 1072,
      195, 1147, 1069,  195,  195, 1085,  195, 1070,  195,  195,
      195,  195,  195,  195, 1073,  195,  195, 1071, 1075,  195,
      195,  195,  195,  195,  195, 1074, 1072,  195,  195,  195,
      195,  195, 1085,  195, 1076, 1147,  195,  195,  195,  195,
     1077, 1073,  195,  195, 1086, 1075,  195,  195,  195,  195,

      195,  195, 1074,  195,  195,  195,  195,  195,  195,  195,
      195, 1076, 1078, 1079,  195,  195,  195, 1077,  195,  195,
      195, 1086, 1087,  195,  195,  195,  195,  195, 1088,  195,
      195,  195, 1089, 1090,  195,  195,  195,  195,  195, 1078,
     1079,  195, 1091, 1092, 1080,  195,  195,  195, 1093, 1087,
      195,  195, 1094,  195,  195, 1088,  195,  195,  195, 1089,
     1090,  195,  195,  195, 1096,  195,  195, 1095,  195, 1091,
     1092, 1080,  195,  195,  195, 1093, 1097,  195,  195, 1094,
      195,  195,  195,  195,  195, 1147,  195,  195,  195,  195,
      195, 1096,  195,  195, 1095,  195,  195,  195,  195,  195,

      195,  195,  195, 1097,  195, 1147, 1100,  195,  195,  195,
      195,  195, 1098,  195,  195,  195, 1099,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
     1101,  195,  195, 1100,  195,  195, 1102, 1147,  195, 1098,
      195,  195,  195, 1099,  195,  195,  195,  195,  195,  195,
      195, 1104,  195,  195,  195,  195,  195, 1101,  195,  195,
     1103,  195,  195, 1102,  195, 1147,  195,  195,  195,  195,
      195, 1109,  195,  195,  195, 1147, 1105,  195, 1104,  195,
     1106,  195,  195,  195,  195, 1108,  195, 1103,  195,  195,
     1110,  195,  195,  195,  195, 1111, 1112,  195, 1109,  195,

     1107,  195,  195, 1105, 1113,  195,  195, 1106,  195,  195,
     1114,  195, 1108,  195, 1115, 1116, 1118, 1110,  195,  195,
      195,  195, 1111, 1112,  195, 1147,  195, 1107,  195,  195,
     1120, 1113,  195,  195, 1147, 1119,  195, 1114,  195,  195,
      195, 1115, 1116, 1118,  195,  195,  195,  195,  195, 1121,
      195,  195,  195,  195, 1122,  195,  195, 1120,  195,  195,
     1125, 1124, 1119,  195, 1147,  195,  195,  195, 1129,  195,
      195,  195,  195,  195, 1130,  195, 1121,  195,  195,  195,
      195, 1122, 1123,  195,  195,  195,  195, 1125, 1124,  195,
     1131, 1126, 1128,  195, 1132, 1129,  195,  195, 1147,  195,

      195, 1130,  195,  195,  195,  195, 1127,  195,  195, 1123,
     1147,  195,  195,  195,  195, 1147,  195, 1131, 1126, 1128,
      195, 1132,  195,  195,  195,  195, 1133,  195,  195,  195,
      195,  195,  195, 1135,  195,  195,  195,  195,  195,  195,
      195,  195, 1134, 1137,  195,  195,  195, 1136,  195,  195,
      195,  195,  195, 1133,  195,  195,  195,  195,  195,  195,
     1135,  195, 1139,  195,  195,  195,  195,  195, 1138, 1134,
     1137,  195,  195,  195, 1136,  195, 1141,  195,  195, 1143,
     1145,  195,  195,  195,  195,  195, 1147, 1142,  195, 1139,
     1146,  195, 1147,  195,  195, 1138, 1140,  195,  195, 1147,

     1147, 1144,  195, 1141,  195,  195, 1143, 1145,  195,  195,
     1147,  195, 1147, 1147, 1142,  195, 1147, 1146,  195, 1147,
     1147, 1147, 1147, 1140,  195,  195, 1147, 1147, 1144,  195,
     1147, 1147, 1147, 1147, 1147,  195, 1147, 1147,  195,   46,
       46,   46,   46,   46,   88, 1147, 1147,   88,   88,  181,
      181,  181, 1147,  181,  183, 1147,  183,  183,  183,  186,
     1147,  186,  186,  186,  195, 1147,  195,  195,  195,    7,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147
    } ;

static const flex_int16_t yy_chk[4637] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15, 1150,   15,   17,
       17,   18,   18,   21,   22,   21,   30,   27,   28,   31,
       41,   21,   41,   21,   27,   41,   44,   21,   21,   55,
       27,   55,   28, 1093,   22,   49,   49,   50,   50,  396,
       21,   22,   21,   30,   27,   28,   31,   41,   21,   41,
       21,   27,   41,   44,   21,   21,   32,   27,   29,   28,
       32,   22,   23,   33,   32,   29,   29,   33,  280,   23,

       32,   29,  190,   33,   57,   57,   23,   58,   58,   23,
       23,   34,   23,   32,  189,   29,  186,   32,   36,   23,
       33,   32,   29,   29,   33,   34,   23,   32,   29,   36,
       33,   34,   92,   23,   91,   36,   23,   23,   34,   23,
       24,   39,   42,   39,   24,   36,   39,   38,   24,   98,
       42,   38,   34,   39,   24,   38,   36,   24,   34,   43,
       43,   38,   36,   86,   86,   90,   90,   24,   39,   42,
       39,   24,   71,   39,   38,   24,   98,   42,   38,   88,
       39,   24,   38,   99,   24,   25,   43,   43,   38,  101,
       68,   70,   71,   67,   68,   77,   25,  102,   25,   71,

       67,   70,  103,   25,   68,  110,   67,  111,   25,   85,
       99,   70,   25,   67,   68,   77,  101,   68,   70,   71,
       67,   68,   77,   25,  102,   25,   60,   67,   70,  103,
       25,   68,  110,   67,  111,   25,   26,   59,   70,   73,
       67,   68,   77,   73,   26,  106,  115,   26,   84,   73,
       26,   56,  106,   26,   82,  116,   26,   52,   82,   73,
      107,  117,   82,   26,  107,   51,   73,   47,   84,   45,
       73,   26,  106,  115,   26,   84,   73,   26,   82,  106,
       26,   82,  116,   26,   35,   82,   73,  107,  117,   82,
       83,  107,   35,   83,   83,   84,   35,  118,   35,   35,

      184,  184,  188,  188,   20,   82,   19,   16,   11,  119,
       83,   35,    7,    4,    3,  104,  104,   83,  120,   35,
       83,   83,  100,   35,  118,   35,   35,   40,   40,  104,
      100,   40,  122,  100,   40,   40,  119,   83,  108,  108,
      108,   40,  104,  104,   40,  120,    0,    0,    0,  100,
        0,    0,    0,    0,   40,   40,  104,  100,   40,  122,
      100,   40,   40,    0,  109,  108,  108,  108,   40,    0,
      124,   40,   61,   61,  109,   61,   61,   61,   61,   61,
       61,  112,   61,   61,   61,  126,  112,  127,   61,  113,
       61,  109,  114,  114,  113,  128,   61,  124,   61,  123,

      113,  109,   61,   61,  129,  123,  130,  113,  112,  132,
        0,    0,  126,  112,  127,   61,  113,   61,    0,  114,
      114,  113,  128,   61,    0,   61,  123,  113,    0,   61,
       61,  129,  123,  130,  113,  134,  132,   61,   62,   62,
      136,   62,   62,   62,   62,   62,   62,  121,   62,   62,
       62,  125,  137,  121,  138,   62,  131,  125,  139,  131,
      140,  143,  134,    0,  121,  144,  141,  136,  141,    0,
      145,    0,  146,    0,  121,   62,    0,    0,  125,  137,
      121,  138,   62,  131,  125,  139,  131,  140,  143,  147,
      135,  121,  144,  141,    0,  141,  142,  145,  142,  146,

      135,    0,   62,   62,   63,  135,  135,  148,   63,  142,
      149,   63,  151,  152,  153,  154,  147,  135,   63,  155,
      157,   63,   63,  142,   63,  142,  156,  135,   63,    0,
      156,   63,  135,  135,  148,   63,  142,  149,   63,  151,
      152,  153,  154,    0,  159,   63,  155,  157,   63,   63,
      160,   63,  161,  156,  158,   63,   64,  156,  162,  158,
       64,  163,  164,  165,   64,  166,  167,  162,  168,  173,
       64,  159,  171,   64,  169,  162,    0,  160,  174,  161,
       64,  158,  169,   64,  171,  162,  158,   64,  163,  164,
      165,   64,  166,  167,  162,  168,  173,   64,  170,  171,

       64,  169,  162,  170,    0,  174,  172,   64,   65,  169,
      176,  171,   65,  172,  175,  177,  172,  178,  179,   65,
      175,   65,    0,  282,    0,  170,   65,    0,    0,  195,
      170,   65,   65,  172,  203,   65,    0,  176,  284,   65,
      172,  175,  177,  172,  178,  179,   65,  175,   65,  195,
      282,  196,  196,   65,  203,  197,  195,    0,   65,   65,
       66,  203,  199,  199,   66,  284,  285,  287,   66,    0,
      197,   66,  196,  289,   66,  197,  195,   66,  196,  196,
       66,  203,  197,  199,   66,    0,    0,   66,  290,  199,
      199,   66,  291,  285,  287,   66,  200,  197,   66,  196,

      289,   66,  197,  292,   66,    0,  201,   66,  201,  200,
      199,   66,   69,   69,  209,  290,  200,    0,  205,  291,
       69,   69,  205,  200,  204,  294,   69,  209,  201,    0,
      292,  204,   69,  201,  209,  201,  200,    0,  204,   69,
       69,  209,  205,  200,  204,  205,  207,   69,   69,  205,
      208,  204,  294,   69,  209,  201,  207,    0,  204,   69,
       72,  209,  213,    0,   72,  204,  207,  208,   72,  205,
      208,  204,  220,  207,   72,  295,    0,  208,  213,  220,
      297,    0,  213,  207,   72,    0,    0,   72,  210,  213,
      216,   72,  220,  207,  208,   72,  215,  208,  215,  220,

      212,   72,  295,  210,  216,  213,  220,  297,  210,  213,
      216,   72,   74,  212,  212,  210,   74,  216,  215,  220,
      212,  217,  217,  215,  214,  215,   74,  212,    0,    0,
      210,  216,   74,  298,  214,  210,   74,  216,    0,   74,
      212,  212,  217,   74,  214,  215,    0,  212,  217,  217,
        0,  214,    0,   74,  218,  221,  218,    0,  296,   74,
      298,  214,  221,   74,   75,   75,  299,  296,  221,  217,
      231,  214,    0,   75,    0,  221,  218,   75,  222,   75,
       75,  218,  221,  218,   75,  296,    0,    0,  222,  221,
      231,   75,   75,  299,  296,  221,    0,  231,  222,  236,

       75,  223,  221,  218,   75,  222,   75,   75,  223,    0,
      224,   75,   76,  226,  223,  222,   76,  231,  300,  236,
      224,  223,  226,   76,  225,  222,  236,    0,  223,   76,
      224,  225,  227,  226,  248,  223,   76,  224,    0,   76,
      226,  223,  227,   76,  225,  300,  236,  224,  223,  226,
       76,  225,  227,  229,  248,  228,   76,  224,  225,  227,
      226,  248,  302,   76,   78,  228,  232,  229,   78,  227,
      229,  225,   78,  229,  305,  228,    0,  232,   78,  227,
      229,  248,  228,  306,  308,    0,  232,  230,   78,  302,
        0,   78,  228,  232,  229,   78,  309,  229,  310,   78,

      229,  305,  228,  230,  232,   78,    0,  230,  303,  311,
      306,  308,  303,  232,  230,   78,   79,  234,   79,  312,
      313,   79,    0,  309,    0,  310,  234,    0,   79,  235,
      230,  238,  238,  235,  230,  303,  311,  234,   79,  303,
        0,  241,    0,   79,  234,   79,  312,  313,   79,  235,
        0,  238,    0,  234,  241,   79,  235,  237,  238,  238,
      235,  241,  246,    0,  234,   79,   80,   80,  241,  246,
       80,  237,    0,   80,   80,  314,  235,  237,  238,  239,
       80,  241,  246,   80,  237,  239,    0,  239,  241,  246,
       80,    0,  316,   80,   80,    0,  246,   80,  237,  239,

       80,   80,  314,    0,  237,    0,  239,   80,    0,  246,
       80,    0,  239,  242,  239,  243,  244,   80,   81,  316,
      249,  249,  242,    0,  243,    0,  239,   81,  318,   81,
      254,  244,   81,  242,  254,  243,  244,  319,   81,    0,
      242,  249,  243,  244,    0,   81,    0,  249,  249,  242,
      254,  243,  245,  320,   81,  318,   81,  254,  244,   81,
      242,  254,  243,  244,  319,   81,  198,  245,  249,    0,
      247,  247,  245,  198,  321,  250,  251,  254,  250,  245,
      320,  198,  322,    0,  198,    0,  198,    0,    0,    0,
      247,  251,    0,  198,  245,  250,  251,  247,  247,  245,

      198,  321,  250,  251,    0,  250,  252,    0,  198,  322,
      257,  198,  257,  198,  202,  202,  202,  247,  251,  252,
        0,  253,  250,  251,    0,  253,  252,  255,  323,  202,
      257,  258,    0,  252,  202,    0,  255,  257,    0,  257,
        0,  202,  202,  202,    0,  253,  252,  255,  253,  258,
      324,  258,  253,  252,  255,  323,  202,  257,  258,  256,
      266,  202,  206,  255,  259,  261,    0,  259,  256,  206,
      206,  206,  253,  256,  255,  261,  258,  324,  258,  256,
      266,  326,  206,    0,  259,  261,  256,  266,    0,  206,
      263,  259,  261,  263,  259,  256,  206,  206,  206,  327,

      256,    0,  261,  262,  328,    0,  256,  266,  326,  206,
      211,  259,  261,  263,  211,  211,  262,  263,  264,    0,
      263,  211,  329,  262,  267,  264,  327,  265,  211,    0,
      262,  328,  267,  274,  211,    0,  275,  211,  264,  330,
      263,  211,  211,  262,  267,  264,  265,  265,  211,  329,
      262,  267,  264,  274,  265,  211,  275,    0,  331,  267,
      274,  211,  219,  275,  219,  264,  330,    0,  219,    0,
      268,  267,  332,  265,  265,  333,  268,  334,  269,  219,
      274,  268,  269,  275,  219,  331,    0,    0,    0,  219,
      268,  219,  277,  335,  269,  219,  277,  268,  269,  332,

        0,    0,  333,  268,  334,  269,  219,  336,  268,  269,
        0,  219,  233,  233,  271,  271,  277,  268,  337,  277,
      335,  269,  233,  277,  273,  269,  272,  233,  233,  339,
      272,  273,  340,  233,  336,  271,    0,  273,    0,  233,
      233,  271,  271,  277,  273,  337,  272,    0,  342,  233,
        0,  273,  276,  272,  233,  233,  339,  272,  273,  340,
      233,  240,  271,  240,  273,  240,  293,  276,  293,  307,
      317,  273,  276,  272,  240,  342,  343,  317,  344,  276,
      345,  338,  346,  293,  307,  240,    0,  347,  240,  348,
      240,  338,  240,  293,  276,  293,  307,  317,  349,  276,

      350,  240,  351,  343,  317,  344,  352,  345,  338,  346,
      293,  307,  240,  260,  347,  260,  348,  353,  338,  354,
      355,  356,  260,  357,  358,  349,  359,  350,  360,  351,
      260,  361,  362,  352,  363,  260,    0,  364,  365,    0,
      260,  366,  260,    0,  353,  359,  354,  355,  356,  260,
      357,  358,  367,  359,  368,  360,  369,  260,  361,  362,
      370,  363,  260,  270,  364,  365,  270,  372,  366,  373,
      270,  374,  359,  270,  376,  377,  378,  379,  380,  367,
      382,  368,  383,  369,  384,  386,  270,  370,  387,  385,
      270,  385,  388,  270,  372,  389,  373,  270,  374,  390,

      270,  376,  377,  378,  379,  380,  391,  382,  393,  383,
      392,  384,  386,  270,  392,  387,  385,  394,  385,  388,
      397,    0,  389,  398,    0,  399,  390,  401,  400,  402,
        0,  401,    0,  391,    0,  393,    0,  392,  403,  404,
      397,  392,  403,  398,  394,  399,    0,  397,  400,  402,
      398,  401,  399,  405,  401,  400,  402,  406,  401,  404,
        0,  406,  403,  405,    0,  403,  404,  397,    0,  403,
      398,    0,  399,  405,  407,  400,  402,  406,  401,  511,
      405,    0,  512,  410,  406,  409,  404,  409,  406,  403,
      405,  408,  407,  411,  407,  411,  410,    0,  408,    0,

      405,  407,  409,  410,  406,    0,  511,  409,  413,  512,
      410,  408,  409,  513,  409,  411,  413,  412,  408,  407,
      411,  407,  411,  410,  412,  408,  414,    0,  413,  409,
      410,    0,  415,  412,  409,  413,  415,  412,  408,  514,
      513,  414,  411,  413,  412,  417,  414,  416,    0,  418,
      420,  412,  515,  414,  419,  413,  415,    0,  419,  415,
      412,  416,  418,  415,  412,  417,  514,  416,  414,  418,
      420,  423,  417,  414,  416,  421,  418,  420,  419,  515,
      422,  419,  421,  415,  422,  419,  423,    0,  416,  418,
      425,  423,  417,    0,  416,  421,  418,  420,  423,  424,

      426,  424,  421,  428,  422,  419,    0,  422,  516,  421,
      425,  422,    0,  423,  428,  426,  427,  425,  423,  427,
      426,  424,  421,  428,  430,  431,  424,  426,  424,  429,
      428,  422,  429,  433,  432,  516,    0,  425,  432,  427,
      433,  428,  426,  427,  430,  431,  427,  426,  424,  429,
      428,  430,  431,  433,  434,  436,  429,  435,  432,  429,
      433,  432,  517,  437,  519,  432,  427,  433,  434,  436,
      435,  430,  431,  438,  434,  436,  429,  435,  441,  440,
      433,  434,  436,  437,  435,  432,  440,  438,  439,  517,
      437,  519,  439,  438,    0,  434,  436,  435,  441,  440,

      438,  434,  436,  442,  435,  441,  440,  444,  446,  443,
      437,  442,  439,  440,  438,  439,  443,  523,  445,  439,
      438,  445,  524,  442,  446,  441,  440,  444,  446,  443,
      442,    0,  525,    0,  444,  446,  443,  447,  442,  439,
      447,  445,  448,  443,  523,  445,  448,    0,  445,  524,
      442,  446,  449,    0,  444,  446,  443,  447,  451,  525,
      450,  452,  448,  453,  447,  449,  454,  447,  445,  448,
      450,  526,  449,  448,  457,  455,  454,    0,  451,  449,
      450,  452,    0,  453,  447,  451,  454,  450,  452,  448,
      453,  455,  449,  454,  457,  455,  458,  450,  526,  449,

      456,  457,  455,  454,  459,  451,  460,  450,  452,  456,
      453,  458,  466,  454,  462,  462,  458,  527,  455,  459,
      456,  457,  455,  458,  459,  461,  460,  456,  466,  461,
      463,  459,  466,  460,  463,  462,  456,    0,  458,  466,
      528,  462,  462,  458,  527,  461,  459,  456,  464,  467,
      464,  459,  461,  460,  463,  466,  461,  463,  465,  466,
      465,  463,  462,  468,  467,    0,  470,  528,  464,  467,
        0,    0,  461,  470,  471,  464,  467,  464,  465,  468,
        0,  463,    0,  468,  472,  465,  470,  465,  471,  469,
      468,  467,  469,  470,  471,  464,  467,  473,  474,    0,

      470,  471,    0,  475,  472,  465,  468,  475,  529,  469,
      468,  472,  479,  470,  479,  471,  469,  473,  474,  469,
      476,  471,  475,  484,  473,  474,  477,  475,  477,  476,
      475,  472,  479,  480,  475,  529,  469,  480,  478,  479,
      476,  479,    0,  484,  473,  474,  478,  476,  477,  475,
      484,  481,  530,  477,  475,  477,  476,  480,  478,  479,
      480,    0,    0,  483,  480,  478,  481,  476,  486,  482,
      484,  481,  482,  478,    0,  477,    0,  483,  481,  530,
      487,  485,  489,  483,  480,  478,    0,    0,  486,  482,
      483,  485,  531,  481,  488,  486,  482,  489,  481,  482,

      487,  485,  489,  491,  483,  492,  490,  487,  485,  489,
      483,  533,  488,  490,  488,  486,  482,  495,  485,  531,
      492,  488,  493,  491,  489,  492,  490,  487,  485,  489,
      491,  493,  492,  490,  494,  496,  497,  495,  533,  488,
      490,  488,  493,    0,  495,  499,  534,  492,  494,  493,
      491,    0,  492,  490,  494,  496,  497,  498,  493,  498,
      500,  494,  496,  497,  495,  499,  535,    0,  536,  493,
      500,    0,  499,  534,  537,  494,    0,  498,  501,  502,
      500,  494,  496,  497,  498,  538,  498,  500,  501,  502,
      501,    0,  499,  535,  504,  536,  503,  500,  501,  502,

      503,  537,  505,  504,  498,  501,  502,  500,    0,  506,
        0,  506,  538,    0,  504,  501,  502,  501,  505,  507,
      503,  504,  505,  503,  539,  501,  502,  503,    0,  505,
      504,  506,  540,    0,  544,  508,  506,  507,  506,  507,
      509,  504,  545,  509,  508,  505,  507,  503,  508,  505,
      546,  539,  510,  547,  548,  508,  549,  551,  506,  540,
      509,  544,  508,  552,  507,  510,  507,  509,  553,  545,
      509,  508,  510,  556,  557,  508,  558,  546,  560,  510,
      547,  548,  508,  549,  551,  562,  563,  509,  564,  565,
      552,  566,  510,  568,  573,  553,  575,  577,  579,  510,

      556,  557,  566,  558,  580,  560,  578,  578,  581,  582,
      583,  584,  562,  563,  585,  564,  565,  586,  566,  587,
      568,  573,  588,  575,  577,  579,  590,  591,  592,  566,
      593,  580,  594,  578,  578,  581,  582,  583,  584,  595,
      597,  585,  598,  599,  586,  601,  587,  602,  606,  588,
      607,  608,  610,  590,  591,  592,  611,  593,  612,  594,
      613,  614,  615,  616,  617,  620,  595,  597,    0,  598,
      599,    0,  601,  623,  602,  606,  625,  607,  608,  610,
        0,  624,  626,  611,  627,  612,  623,  613,  614,  615,
      616,  617,  620,  623,  624,  629,  625,  627,  628,  630,

      623,  624,  626,  625,  627,    0,  631,  628,  624,  626,
      631,  627,  632,  623,    0,  629,  633,    0,  628,  630,
      623,  624,  629,  625,  627,  628,  630,  634,  624,  626,
      631,  627,  632,  631,  628,  635,  633,  631,    0,  632,
      636,  635,  629,  633,  636,  628,  630,  634,    0,  638,
      637,    0,  639,  638,  634,  635,    0,  631,  637,  632,
        0,  737,  635,  633,  636,  639,  640,  636,  635,  638,
      637,  636,  639,    0,  634,  641,  638,  637,  642,  639,
      638,  640,  635,  644,  643,  637,  640,  643,  737,  641,
        0,  636,  639,  640,    0,  641,  638,  637,  642,  639,

      647,  646,  641,  644,    0,  642,    0,  643,  640,  739,
      644,  643,  645,  640,  643,  647,  641,  646,  649,  645,
      647,  646,  641,    0,    0,  642,    0,  647,  646,  648,
      644,  649,  645,  648,  643,  650,  739,  650,  649,  645,
      741,  653,  647,    0,  646,  649,  645,  647,  646,  654,
      651,  655,  656,  648,  651,  742,  648,  650,  649,  645,
      648,  653,  650,  656,  650,  649,  652,  741,  653,  654,
      651,  655,  656,  652,  657,  658,  654,  651,  655,  656,
      648,  651,  742,  660,  650,  657,  652,  660,  653,  659,
      656,  658,  744,  652,  657,  658,  654,  651,  655,  656,

      652,  657,  658,  661,  659,  662,  666,  660,    0,  659,
      660,    0,  657,  652,  660,  745,  659,    0,  658,  744,
      663,  657,  658,  661,  664,  662,  666,    0,  665,  667,
      661,  659,  662,  666,  660,  663,  659,  671,  665,  664,
      663,  668,  745,  746,  664,  747,    0,  663,  665,  667,
      661,  664,  662,  666,  668,  665,  667,  671,  670,  669,
      673,  668,  663,  669,  671,  665,  664,  663,  668,  670,
      746,  664,  747,  672,  748,  665,  667,    0,  670,  674,
      673,  668,  672,  669,  671,  670,  669,  673,  668,  750,
      669,  676,  674,  672,  675,  677,  670,  679,    0,  674,

      672,  748,    0,  751,  676,  670,  674,  673,  677,  672,
      669,  676,  681,  675,  675,  677,  750,  679,  676,  674,
      672,  675,  677,  678,  679,  678,  674,  680,  682,  683,
      751,  676,  681,  684,  680,  677,  678,  686,  676,  681,
      675,  675,  677,  678,  679,  688,  752,  680,  682,  683,
      678,  685,  678,  684,  680,  682,  683,  686,    0,  681,
      684,  680,  687,  678,  686,  688,  685,  689,  692,  687,
      678,  685,  688,  752,  680,  682,  683,  753,  685,  754,
      684,  692,  687,  691,  686,  690,  691,  689,  692,  687,
        0,  695,  688,  685,  689,  692,  687,  693,  685,  690,

      690,  693,  694,  691,  753,  690,  754,    0,  692,  687,
      691,  695,  690,  691,  689,  692,  694,  693,  695,    0,
      696,  697,  694,    0,  693,  701,  690,  690,  693,  694,
      691,  699,  690,  696,  697,    0,  702,  698,  695,  699,
      696,  697,  700,  694,  693,  701,  700,  696,  697,  694,
      698,  699,  701,    0,  704,  703,  702,  698,  699,  703,
      696,  697,  700,  702,  698,    0,  699,  696,  697,  700,
      756,    0,  701,  700,  704,  707,  708,  698,  699,  703,
      705,  704,  703,  702,  698,  706,  703,    0,  705,  700,
      707,  709,  711,  757,  711,  707,  708,  756,  706,  709,

      705,  704,  707,  708,  710,  706,  703,  705,  712,  713,
      714,  709,  706,  710,  711,  705,    0,  707,  709,  711,
      757,  711,  707,  708,  710,  706,  709,  705,  712,  713,
      714,  710,  706,  715,  716,  712,  713,  714,  709,  717,
      710,  711,  721,  719,  718,  720,  758,  720,  759,  760,
        0,  710,  719,  715,  716,  712,  713,  714,  718,  717,
      715,  716,  721,  719,  718,  720,  717,  722,  723,  721,
      719,  718,  720,  758,  720,  759,  760,  723,  761,  719,
      715,  716,  724,  722,    0,  718,  717,  722,  723,  721,
      719,  718,  720,  725,  722,  723,  726,  725,  724,  727,

        0,  727,  724,    0,  723,  761,    0,  728,    0,  724,
      722,  726,  730,  762,  722,  723,  726,  725,  763,  727,
      725,  731,  732,  726,  725,  724,  727,  728,  727,  724,
      729,  733,  730,  729,  728,  734,  764,  768,  726,  730,
      762,  731,  732,  726,  725,  763,  727,  769,  731,  732,
      729,  733,  770,  771,  728,  734,  772,  729,  733,  730,
      729,  773,  734,  764,  768,  774,  776,  777,  731,  732,
      778,  779,  784,  786,  769,  787,  789,  729,  733,  770,
      771,  791,  734,  772,  793,  794,  795,  796,  773,  798,
      799,  801,  774,  776,  777,  802,  803,  778,  779,  784,

      786,  804,  787,  789,  805,  806,  807,  808,  791,  809,
      811,  793,  794,  795,  796,  812,  798,  799,  801,  813,
      815,  816,  802,  803,  818,  819,    0,    0,  804,  820,
      821,  805,  806,  807,  808,  822,  809,  811,  823,  824,
      825,  825,  812,  820,  818,  819,  813,  815,  816,  820,
      821,  818,  819,  826,  827,  822,  820,  821,  823,  824,
        0,  825,  822,  829,  903,  823,  824,  825,  825,  827,
      820,  818,  819,  826,  827,  828,  820,  821,  829,  830,
      826,  827,  822,  829,  828,  823,  824,  831,  825,  830,
      829,  903,  832,  904,  834,  828,  827,    0,  834,  830,

      826,  827,  828,  837,  833,  829,  830,  831,  836,  838,
      829,  828,  832,  833,  831,  836,  830,  835,  834,  832,
      904,  834,  828,  837,  833,  834,  830,  835,  836,  838,
      837,  833,  841,  840,  831,  836,  838,  835,  842,  832,
      833,  841,  836,  839,  835,  834,  843,  839,  840,  905,
      837,  833,  841,  840,  835,  836,  838,  844,  842,  841,
      840,  845,  845,  839,  835,  842,  843,  846,  841,  847,
      839,  847,  844,  843,  839,  840,  905,  844,    0,  841,
      840,  846,  845,  848,  844,  842,  849,  846,  845,  845,
      839,  847,  850,  843,  846,    0,  847,  851,  847,  844,

      853,  852,  854,  848,  844,  852,  849,  853,  846,  845,
      848,  856,  850,  849,  846,  851,  854,  851,  847,  850,
      853,  855,  854,  855,  851,  852,  856,  853,  852,  854,
      848,  856,  852,  849,  853,  857,  858,  860,  856,  850,
      906,  855,  851,  854,  851,  859,    0,  853,  855,  854,
      855,  863,  852,  856,  862,  857,  858,  860,  856,  861,
      859,  862,  857,  858,  860,  859,  908,  906,  855,  864,
      865,  863,  859,  861,  862,  866,    0,    0,  863,  861,
      910,  862,  857,  858,  860,  867,  861,  859,  862,  864,
      865,  868,  859,  908,  871,  866,  864,  865,  863,  869,

      861,  862,  866,  869,  870,  867,  861,  910,  873,    0,
        0,  868,  867,  870,  871,    0,  864,  865,  868,  872,
        0,  871,  866,  869,  870,  875,  869,  876,  873,  874,
      869,  870,  867,  877,  872,  873,  878,  878,  868,  872,
      870,  871,  880,  874,    0,  875,  872,  876,  877,  874,
      869,  870,  875,  877,  876,  873,  874,  878,  879,  881,
      877,  872,  880,  878,  878,    0,  872,  883,  911,  880,
      874,  879,  875,  882,  876,  877,  874,  882,  879,  881,
      877,  885,  885,  888,  878,  879,  881,  883,  884,  880,
        0,  912,  884,  882,  883,  911,  886,  888,  879,    0,

      882,    0,  885,  888,  882,  879,  881,  891,  885,  885,
      888,  886,  884,  889,  883,  884,  886,  890,  912,  884,
      882,  887,  887,  886,  888,    0,  890,  891,  889,  885,
      888,  893,  892,  889,  891,    0,  894,  890,  886,  884,
      889,  892,  887,  886,  890,  895,  895,  896,  887,  887,
      897,  893,  892,  890,  891,  889,  894,  913,  893,  892,
      889,  898,  900,  894,  890,  915,  895,  896,  892,  887,
      897,  917,  895,  895,  896,  898,  899,  897,  893,  892,
      899,  898,  900,  894,  913,  921,  923,  924,  898,  900,
      925,  930,  915,  895,  896,  932,  933,  897,  917,  936,

      899,  937,  898,  899,  940,  941,  942,  899,  898,  900,
      943,  945,  921,  923,  924,  946,  951,  925,  930,  952,
      953,  954,  932,  933,  959,  960,  936,  899,  937,  961,
      962,  940,  941,  942,  963,  964,    0,  943,  945,  962,
      966, 1025,  946,  951,  965,  960,  952,  953,  954,  961,
      962,  959,  960,  968,  963,  964,  961,  962,  965,  969,
      966,  963,  964,  967,  965,    0,  962,  966, 1025, 1026,
      967,  965,  960,  968,  969,  970,  961,  962,  972,  969,
      968,  963,  964,  967,  973,  965,  969,  966,  975,  970,
      967,  965,  971,  972,  971,  970, 1026,  967,  972,    0,

      968,  969,  970,  977,  973,  972,  969,  978,  975,  974,
      967,  973,  974,  979,  971,  975,  970,  980,  981,  971,
      972,  971,  970,  977,  976,  972,  976,  978,  982,    0,
      977,  973,  974,  979,  978,  975,  974,  980,  981,  974,
      979,  971,  984,  982,  980,  981,  976,  985,  982,    0,
      977,  976,  983,  976,  978,  982,  983,  984,  986,  974,
      979,  987,  984,    0,  980,  981,  988,  985,    0,  984,
      982,  990,  983,  976,  985,  982,  989,  989,  986,  983,
      992,  987,  991,  983,  984,  986,  988,    0,  987,  984,
      993,  990,  994,  988,  985,  991,    0,  989,  990,  983,

      992, 1028,  991,  989,  989,  986,  997,  992,  987,  991,
      993,  998,  994,  988,  995,  999,    0,  993,  990,  994,
     1029,  995,  991,  996,  989,  996,  997,  992, 1028,  991,
      999,  998,    0,  997,  995,  999, 1000,  993,  998,  994,
     1000,  995,  999,  996, 1002, 1001, 1003, 1029,  995, 1001,
      996,    0,  996,  997, 1005, 1032, 1000,  999,  998, 1006,
     1007,  995,  999, 1000, 1002, 1001, 1003, 1000, 1005, 1008,
      996, 1002, 1001, 1003, 1005, 1004, 1001, 1004, 1009, 1006,
     1007, 1005, 1032, 1000, 1010,    0, 1006, 1007, 1010, 1008,
     1011, 1002, 1001, 1003, 1033, 1005, 1008, 1004, 1009, 1012,

     1014, 1005, 1004, 1015, 1004, 1009, 1006, 1007, 1010, 1016,
     1011, 1010, 1012, 1013, 1013, 1010, 1008, 1011, 1017, 1012,
     1014, 1033, 1036, 1015, 1004, 1009, 1012, 1014, 1039, 1016,
     1015, 1018, 1040, 1041, 1013, 1010, 1016, 1011, 1017, 1012,
     1013, 1013, 1043, 1045, 1018, 1017, 1012, 1014, 1046, 1036,
     1015, 1018, 1048, 1050, 1051, 1039, 1016, 1052, 1018, 1040,
     1041, 1013, 1053, 1054, 1057, 1017, 1055, 1056, 1057, 1043,
     1045, 1018, 1058, 1050, 1051, 1046, 1059, 1052, 1018, 1048,
     1050, 1051, 1053, 1054, 1052,    0, 1055, 1056, 1057, 1053,
     1054, 1057, 1058, 1055, 1056, 1057, 1059, 1060, 1061, 1058,

     1050, 1051, 1062, 1059, 1052,    0, 1064, 1063, 1065, 1053,
     1054, 1066, 1060, 1055, 1056, 1057, 1063, 1060, 1061, 1058,
     1068, 1069, 1062, 1059, 1060, 1061, 1064, 1063, 1065, 1062,
     1067, 1066, 1067, 1064, 1063, 1065, 1070,    0, 1066, 1060,
     1068, 1069, 1072, 1063, 1060, 1061, 1073, 1068, 1069, 1062,
     1071, 1072, 1067, 1064, 1063, 1065, 1070, 1067, 1066, 1067,
     1071, 1074, 1072, 1070, 1075,    0, 1073, 1068, 1069, 1072,
     1071, 1082, 1076, 1073, 1078,    0, 1074, 1071, 1072, 1067,
     1076, 1074, 1077, 1070, 1075, 1079, 1080, 1071, 1074, 1072,
     1085, 1075, 1076, 1073, 1078, 1086, 1087, 1071, 1082, 1076,

     1077, 1078, 1077, 1074, 1088, 1079, 1080, 1076, 1074, 1077,
     1089, 1075, 1079, 1080, 1090, 1092, 1094, 1085, 1095, 1076,
     1096, 1078, 1086, 1087, 1097,    0, 1098, 1077, 1099, 1077,
     1099, 1088, 1079, 1080,    0, 1096, 1105, 1089, 1095, 1101,
     1096, 1090, 1092, 1094, 1097, 1095, 1098, 1096, 1099, 1100,
     1100, 1097, 1103, 1098, 1101, 1099, 1105, 1099, 1104, 1101,
     1104, 1103, 1096, 1105,    0, 1095, 1101, 1096, 1109, 1102,
     1100, 1097, 1103, 1098, 1113, 1099, 1100, 1100, 1104, 1103,
     1106, 1101, 1102, 1105, 1107, 1104, 1101, 1104, 1103, 1102,
     1117, 1106, 1108, 1108, 1119, 1109, 1102, 1100,    0, 1103,

     1106, 1113, 1120, 1121, 1107, 1104, 1107, 1106, 1122, 1102,
        0, 1107, 1123, 1108, 1119,    0, 1102, 1117, 1106, 1108,
     1108, 1119, 1120, 1121, 1124, 1125, 1123, 1106, 1122, 1120,
     1121, 1107, 1123, 1131, 1126, 1122, 1127, 1128, 1132, 1123,
     1108, 1119, 1127, 1135, 1124, 1125, 1133, 1134, 1136, 1120,
     1121, 1124, 1125, 1123, 1126, 1122, 1127, 1128, 1132, 1123,
     1131, 1126, 1137, 1127, 1128, 1132, 1133, 1134, 1136, 1127,
     1135, 1124, 1125, 1133, 1134, 1136, 1139, 1140, 1138, 1141,
     1143, 1126, 1146, 1127, 1128, 1132,    0, 1140, 1142, 1137,
     1144, 1144,    0, 1133, 1134, 1136, 1138, 1140, 1138,    0,

        0, 1142, 1146, 1139, 1140, 1138, 1141, 1143, 1142, 1146,
        0, 1144,    0,    0, 1140, 1142,    0, 1144, 1144,    0,
        0,    0,    0, 1138, 1140, 1138,    0,    0, 1142, 1146,
        0,    0,    0,    0,    0, 1142,    0,    0, 1144, 1148,
     1148, 1148, 1148, 1148, 1149,    0,    0, 1149, 1149, 1151,
     1151, 1151,    0, 1151, 1152,    0, 1152, 1152, 1152, 1153,
        0, 1153, 1153, 1153, 1154,    0, 1154, 1154, 1154, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"


#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;
char* substr(const char* source, int from, int to);
#line 2076 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2090 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2377 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1148 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1147 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "flex_lexer.l"

	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(INDEXED)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(GENERATED)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(ALWAYS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(TRIGGER)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(EACH)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(ROW)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(CURRENT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(EXCLUDE)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(OTHERS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TIES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(NOTHING)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(NULLS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(LAST)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(FIRST)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(DO)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(COLLATE)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	yylval->ival = 1;
	return SQL_INTVAL;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
	yylval->ival = 0;
	return SQL_INTVAL;
}
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 154:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 161:
#line 239 "flex_lexer.l"
case 162:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 260 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 261 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 263 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 264 "flex_lexer.l"
{  /*fprintf(stdout, "[SQL-Lexer-Error] Unterminated string\n"); */ return 0; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 266 "flex_lexer.l"
{ /*fprintf(stdout, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); */ return 0; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 269 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3309 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1148 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1148 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1147);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 269 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

char* substr(const char* source, int from, int to) {
    int len = to - from;
    char* copy = (char*)malloc(len + 1);
    ;
    strncpy(copy, source + from, len);
    copy[len] = '\0';
    return copy;
}

int yyerror(const char *msg) {
    fprintf(stdout, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
